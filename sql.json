{
    "simpleif": {
        "prefix": "sql-if",
        "body": [
            "IF (jsondata->>'media' is not null) THEN",
            "    NEW.channel = jsondata->>'media';",
            "END IF;"
        ],
        "description": "SQL Simple IF"
    },
    "simplecase": {
        "prefix": "sql-case",
        "body": [
            "SELECT CASE WHEN (jsondata->>'media') IS NULL THEN",
            "    'aaaa'",
            "ELSE",
            "    jsondata->>'media'",
            "END",
            "FROM chassi_contacts"
        ],
        "description": "SQL Simple Case"
    },
    "createtable": {
        "prefix": "sql-newtable",
        "body": [
            "CREATE TABLE NAME (",
            "  id serial PRIMARY KEY,",
            "  created TIMESTAMP NOT NULL DEFAULT now(),",
            "  updated TIMESTAMP NOT NULL DEFAULT now(),",
            "  UNIQUE(FIELD)",
            ");"
        ],
        "description": "SQL New Table"
    },
    "procedure": {
        "prefix": "sql-procedure",
        "body": [
            "",
            "DROP FUNCTION IF EXISTS PROCEDURENAME();",
            "CREATE FUNCTION PROCEDURENAME()",
            "    RETURNS trigger",
            "    LANGUAGE 'plpgsql'",
            "    COST 100",
            "AS \\$BODY\\$",
            "BEGIN",
            "",
            "  if ((new.status != 'online') AND (old.status = 'online')) then",
            "    new.end_contact = now();",
            "    new.total_time = new.end_contact - old.created;",
            "  end if;",
            "",
            "  return new;",
            "END;",
            "\\$BODY\\$;"
        ],
        "description": "SQL New Table"
    },
    "trigger": {
        "prefix": "sql-trigger",
        "body": [
            "DROP FUNCTION IF EXISTS procedure_NAME();",
            "CREATE FUNCTION procedure_NAME()",
            "    RETURNS trigger",
            "    LANGUAGE 'plpgsql'",
            "    COST 100",
            "AS \\$BODY\\$",
            "BEGIN",
            "",
            "  IF ((NEW.status != 'online') AND (OLD.status = 'online')) THEN",
            "    NEW.end_contact = now();",
            "    NEW.total_time = NEW.end_contact - OLD.created;",
            "  END IF;",
            "",
            "  RETURN NEW;",
            "END;",
            "\\$BODY\\$;",
            "",
            "DROP TRIGGER IF EXISTS tg_NAME ON table_NAME;",
            "CREATE TRIGGER tg_NAME",
            "  BEFORE INSERT OR UPDATE",
            "  ON table_NAME",
            "  FOR EACH ROW",
            "  EXECUTE PROCEDURE procedure_NAME();"
        ],
        "description": "SQL New Table"
    },
    "functionReturnBoolean": {
        "prefix": "sql-function-return-boolean",
        "body": [
            "CREATE OR REPLACE FUNCTION fc_name(",
            "   p1 character varying,",
            "   p2 integer",
            ")",
            "  RETURNS boolean",
            "AS \\$BODY\\$",
            "DECLARE",
            "  v1 INT;",
            "BEGIN",
            "",
            "  DELETE FROM chats;",
            "",
            "  FOR reg in",
            "    SELECT tel.numero, tel.ddd, tel.operadora",
            "      FROM meuesquema.telefone tel",
            "  LOOP",
            "    RETURN NEXT reg;",
            "  END LOOP;",
            "",
            "  RETURN true;",
            "END;",
            "\\$BODY\\$",
            "LANGUAGE plpgsql VOLATILE;"
        ],
        "description": "SQL function"
    },
    "functionReturnTable": {
        "prefix": "sql-function-return-table",
        "body": [
            "CREATE OR REPLACE FUNCTION fc_name(",
            "   p1 integer",
            ")",
            "  RETURNS TABLE(r_id integer, r_name character varying)",
            "AS \\$BODY\\$",
            "DECLARE",
            "  v1 record;",
            "BEGIN",
            "",
            "  FOR v1 IN",
            "     select d.id, d.name",
            "       from dashlets d",
            "      where d.id not in (select dashlet_id ",
            "                    from user_dashlets",
            "                    where user_id = p1)",
            "  LOOP",
            "    r_id   := v1.id;",
            "    r_name := v1.name;",
            "    RETURN NEXT;",
            "  END LOOP;",
            "  RETURN;",
            "END;",
            "\\$BODY\\$",
            "LANGUAGE plpgsql VOLATILE;"
        ],
        "description": "SQL function"
    },
    "json-select": {
        "prefix": "sql-jsonb-simple-select",
        "body": [
            "SELECT jsondata->>'media', jsondata->'sys'->>'ani' FROM chassi_contacts;",
            "SELECT * FROM chassi_contacts WHERE jsondata->>'media' IN ('message', 'voice');",
            "SELECT * FROM chassi_contacts WHERE jsondata @> '{\"media\": [\"message\"]}';",
            "SELECT * FROM chassi_contacts WHERE jsondata @> '{\"sys\": {\"ani\": \"103\"}}';",
            "UPDATE users SET jsondata = jsondata || '{\"media\": \"voice\"}';"
        ],
        "description": "SQL Jsonb SimpleSelect"
    },
    "json-loop": {
        "prefix": "sql-loop",
        "body": [
            "CREATE OR REPLACE FUNCTION test(",
            "  p1 int[],",
            "  p2 character varying",
            ")",
            "RETURNS setof integer",
            "  OR",
            "RETURNS character varying",
            "AS \\$BODY\\$",
            "DECLARE",
            "  l_value INT;",
            "BEGIN",
            "  FOREACH l_value IN ARRAY p_input",
            "  LOOP",
            "    return next l_value;",
            "  END LOOP;",
            "",
            "  FOR reg in",
            "    SELECT tel.numero, tel.ddd, tel.operadora",
            "      FROM meuesquema.telefone tel",
            "  LOOP",
            "    RETURN NEXT reg;",
            "  END LOOP;",
            "",
            "END;",
            "\\$BODY\\$",
            "LANGUAGE plpgsql VOLATILE;"
        ],
        "description": "SQL Jsonb SimpleSelect"
    },
    "sqlWhenToTimestamp": {
        "prefix": [
            "sql-when-to-timestamp",
            "sql-gettime-to-timestamp",
        ],
        "body": [
            "select to_timestamp(1679088922069/1000),",
            "to_timestamp('1679088922069'::float/1000),",
            "to_timestamp('1679088922069'::float/1000);",
            "to_timestamp(new.portal_segment_end::float/1000) - to_timestamp(new.portal_segment_start::float/1000)"
        ],
        "description": "SQL Jsonb SimpleSelect"
    },
    "sqlOutputArray": {
        "prefix": [
            "sql-output-array",
            "sql-select-to-array",
        ],
        "body": [
            "SELECT",
            "  string_agg(id::text, ',') AS ids,",
            "  string_agg(name, ',') AS names,",
            "  string_agg(email, ',') AS emails",
            "FROM users;"
        ],
        "description": "SQL Agregação de Strings"
    }


}