{
    "simpleif": {
        "prefix": "sql-if",
        "body": [
            "IF (jsondata->>'media' IS NULL) THEN",
            "\tRAISE EXCEPTION 'Media Null';",
            "ELSIF (jsondata->>'media' == 'email') THEN",
            "\tRAISE NOTICE 'Media = Email';",
            "ELSE",
            "\tRAISE NOTICE '%', jsondata->>'media';",
            "END IF;"
        ],
        "description": "SQL Simple IF"
    },
    "simplecasewhen": {
        "prefix": "sql-case-when-simple",
        "body": [
            "CASE WHEN (jsondata->>'media') IS NULL THEN 'aaaa' ELSE jsondata->>'media' END AS media,",
            "COALESCE(COUNT(CASE WHEN resource_type = 'agent' THEN 1 END), 0) AS resource_type_count,"
        ],
        "description": "SQL Simple Case"
    },
    "casewhen": {
        "prefix": "sql-case-when",
        "body": [
            "SELECT CASE WHEN (jsondata->>'media') IS NULL THEN",
            "\t'aaaa'",
            "ELSE",
            "\tjsondata->>'media'",
            "END",
            "FROM chassi_contacts"
        ],
        "description": "SQL Case When"
    },
    "createtable": {
        "prefix": "sql-newtable",
        "body": [
            "CREATE TABLE NAME (",
            "\tid serial PRIMARY KEY,",
            "\tcreated TIMESTAMP NOT NULL DEFAULT now(),",
            "\tupdated TIMESTAMP NOT NULL DEFAULT now(),",
            "\tUNIQUE(FIELD)",
            ");"
        ],
        "description": "SQL New Table"
    },
    "procedure": {
        "prefix": "sql-procedure",
        "body": [
            "",
            "CREATE FUNCTION PROCEDURENAME()",
            "\tRETURNS trigger",
            "\tLANGUAGE 'plpgsql'",
            "\tCOST 100",
            "AS \\$\\$",
            "BEGIN",
            "",
            "\tif ((new.status != 'online') AND (old.status = 'online')) then",
            "\tnew.end_contact = now();",
            "\tnew.total_time = new.end_contact - old.created;",
            "\tend if;",
            "",
            "\treturn new;",
            "END;",
            "\\$\\$; LANGUAGE plpgsql;"
        ],
        "description": "SQL New Table"
    },
    "trigger": {
        "prefix": "sql-trigger",
        "body": [
            "CREATE OR REPLACE FUNCTION calc_logged_time()",
            "RETURNS TRIGGER AS \\$\\$",
            "BEGIN",
            "\tIF NEW.start_time IS NOT NULL AND NEW.end_time IS NOT NULL THEN",
            "\t\tNEW.logged_time := NEW.end_time - NEW.start_time;",
            "\tELSE",
            "\t\tNEW.logged_time := NULL;",
            "\tEND IF;",
            "\tRETURN NEW;",
            "END;",
            "\\$\\$ LANGUAGE plpgsql;",
            "",
            "CREATE TRIGGER calc_logged_time",
            "BEFORE UPDATE ON sua_tabela",
            "FOR EACH ROW",
            "EXECUTE FUNCTION calc_logged_time();"
        ],
        "description": "SQL New Table"
    },
    "functionReturnBoolean": {
        "prefix": "sql-function-return-boolean",
        "body": [
            "CREATE OR REPLACE FUNCTION fc_name(",
            "\tp1 character varying,",
            "\tp2 integer",
            ")",
            "\tRETURNS boolean",
            "AS \\$\\$",
            "DECLARE",
            "\treg record;",
            "BEGIN",
            "",
            "\tDELETE FROM chats;",
            "",
            "\tFOR reg in",
            "\tSELECT tel.numero, tel.ddd, tel.operadora",
            "\t\tFROM meuesquema.telefone tel",
            "\tLOOP",
            "\tRETURN NEXT reg;",
            "\tEND LOOP;",
            "",
            "\tRETURN true;",
            "END;",
            "\\$\\$ LANGUAGE plpgsql;"
        ],
        "description": "SQL function"
    },
    "functionReturnTable": {
        "prefix": "sql-function-return-table-with-for",
        "body": [
            "CREATE OR REPLACE FUNCTION fc_name(",
            "\tp1 integer",
            ")",
            "\tRETURNS TABLE(r_id integer, r_name character varying)",
            "AS \\$\\$",
            "DECLARE",
            "\tv1 record;",
            "BEGIN",
            "",
            "\tFOR v1 IN",
            "\tselect d.id, d.name",
            "\t\t from dashlets d",
            "\t\twhere d.id not in (select dashlet_id ",
            "\t\t\t\t\tfrom user_dashlets",
            "\t\t\t\t\twhere user_id = p1)",
            "\tLOOP",
            "\tr_id   := v1.id;",
            "\tr_name := v1.name;",
            "\tRETURN NEXT;",
            "\tEND LOOP;",
            "\tRETURN;",
            "END;",
            "\\$\\$ LANGUAGE plpgsql;"
        ],
        "description": "SQL function"
    },
    "json-select": {
        "prefix": "sql-jsonb-simple-select",
        "body": [
            "SELECT jsondata->>'media', jsondata->'sys'->>'ani' FROM chassi_contacts;",
            "SELECT * FROM chassi_contacts WHERE jsondata->>'media' IN ('message', 'voice');",
            "SELECT * FROM chassi_contacts WHERE jsondata @> '{\"media\": [\"message\"]}';",
            "SELECT * FROM chassi_contacts WHERE jsondata @> '{\"sys\": {\"ani\": \"103\"}}';",
            "UPDATE users SET jsondata = jsondata || '{\"media\": \"voice\"}';"
        ],
        "description": "SQL Jsonb SimpleSelect"
    },
    "json-loop": {
        "prefix": "sql-loop",
        "body": [
            "CREATE OR REPLACE FUNCTION test(",
            "\tp1 int[],",
            "\tp2 character varying",
            ")",
            "RETURNS setof integer",
            "\tOR",
            "RETURNS character varying",
            "AS \\$\\$",
            "DECLARE",
            "\tl_value INT;",
            "BEGIN",
            "\tFOREACH l_value IN ARRAY p_input",
            "\tLOOP",
            "\treturn next l_value;",
            "\tEND LOOP;",
            "",
            "\tFOR reg in",
            "\tSELECT tel.numero, tel.ddd, tel.operadora",
            "\t\tFROM meuesquema.telefone tel",
            "\tLOOP",
            "\tRETURN NEXT reg;",
            "\tEND LOOP;",
            "",
            "END;",
            "\\$\\$ LANGUAGE plpgsql;"
        ],
        "description": "SQL Jsonb SimpleSelect"
    },
    "sqlWhenToTimestamp": {
        "prefix": [
            "sql-when-to-timestamp",
            "sql-gettime-to-timestamp"
        ],
        "body": [
            "select to_timestamp(1679088922069/1000),",
            "to_timestamp('1679088922069'::float/1000),",
            "to_timestamp('1679088922069'::float/1000);",
            "to_timestamp(new.portal_segment_end::float/1000) - to_timestamp(new.portal_segment_start::float/1000)"
        ],
        "description": "SQL Jsonb SimpleSelect"
    },
    "sqlOutputArray": {
        "prefix": [
            "sql-output-array",
            "sql-select-to-array"
        ],
        "body": [
            "SELECT",
            "\tstring_agg(id::text, ',') AS ids,",
            "\tstring_agg(name, ',') AS names,",
            "\tstring_agg(email, ',') AS emails",
            "FROM users;"
        ],
        "description": "SQL Agregação de Strings"
    },
    "metric-abandonmentRate-function": {
        "prefix": "sql-function-return-table",
        "body": [
            "CREATE OR REPLACE FUNCTION fcname(",
            "\tstart_time timestamp,",
            "\tend_time timestamp",
            ")",
            "RETURNS TABLE(",
            "\ttme float,",
            "\tbucket timestamp",
            ")",
            "AS \\$\\$",
            "DECLARE",
            "\ttme_var float;",
            "\tbucket_var timestamp;",
            "BEGIN",
            "",
            "\tSELECT AVG(measure), time_bucket('15 minutes', time)",
            "\t\tINTO tme_var, bucket_var",
            "\t\tFROM answer_time",
            "\t\tWHERE (time BETWEEN start_time AND end_time)",
            "\t\t\tAND tags->>'type' = 'queue'",
            "\t\t\tAND measure is not null",
            "\t\tGROUP BY time_bucket('15 minutes', time);",
            "",
            "\tRETURN QUERY",
            "\tSELECT tme_var, bucket_var;",
            "",
            "END;",
            "\\$\\$ LANGUAGE plpgsql;",
            "",
            "select * from fcname('2023-01-01 0:0', '2023-12-31 0:0');"
        ],
        "description": "Calculate abandonment rate based on start and end time"
    },
    "selectCurrentDate": {
        "prefix": [
            "sql-select-current-date",
            "sql-select-structure",
            "sql-select-join-lateral",
            "sql-select-elegant"
        ],
        "body": [
            "SELECT",
            "\tu.name, u.extension, p.pause_label",
            "FROM",
            "\tagent_access_histories a",
            "JOIN",
            "\tusers u ON u.id = a.user_id",
            "JOIN",
            "\troles r ON r.id = u.role_id",
            "LEFT JOIN LATERAL (",
            "\tSELECT pause_label",
            "\tFROM agent_access_histories",
            "\tWHERE user_id = u.id",
            "\t\tAND access_type != 'login'",
            "\tORDER BY start_time DESC",
            "\tLIMIT 1",
            ") AS p ON true",
            "WHERE",
            "\ta.start_time::date = CURRENT_DATE",
            "\tAND r.alias IN ('admin', 'agent')",
            "GROUP BY",
            "\tu.name, u.extension, u.status, p.pause_label",
            "ORDER BY",
            "\tu.name ASC;"
        ],
        "description": "Select query in SQL"
    },
    "roundTwoDecimal": {
        "prefix": "sql-round-2-decimal",
        "body": [
            "CREATE FUNCTION two_decimals()",
            "RETURNS TABLE (",
            "\tavailable bigint,",
            "\tavailable_percentual numeric(10,2),",
            "\ttotal bigint",
            ") AS",
            "$$",
            "DECLARE",
            "\tavailable_var BIGINT;",
            "\tlogged_var BIGINT;",
            "BEGIN",
            "\tSELECT",
            "\t\tSUM(CASE WHEN pause_label = 'available' THEN 1 ELSE 0 END) AS available,",
            "\t\tSUM(CASE WHEN pause_label IS NULL THEN 1 ELSE 0 END) AS logged",
            "\tINTO",
            "\t\tavailable_var,",
            "\t\tlogged_var",
            "\tFROM",
            "\t\t(",
            "\t\t\tSELECT",
            "\t\t\t\ta.user_id,",
            "\t\t\t\tMAX(a.pause_label) AS pause_label",
            "\t\t\tFROM",
            "\t\t\t\tagent_access_histories a",
            "\t\t\tWHERE",
            "\t\t\t\ta.end_time IS NULL",
            "\t\t\tGROUP BY",
            "\t\t\t\ta.user_id",
            "\t\t) AS latest_pause",
            "\tGROUP BY",
            "\t\tpause_label;",
            "",
            "\tRETURN QUERY SELECT",
            "\t\tavailable_var,",
            "\t\tROUND(available_var * 100.0 / logged_var, 2),",
            "\t\tlogged_var;",
            "END;",
            "$$",
            "LANGUAGE plpgsql;"
        ],
        "description": "Returns numeric2 information"
    },
    "SQLCTEWith": {
        "prefix": "sql-cte-with-sintaxe",
        "body": [
            "-- Common Table Expression",
            "WITH filtered_data AS (",
            "\tSELECT",
            "\t\ttime, tags->>'how' AS how",
            "\tFROM",
            "\t\tanswer_time",
            "\tWHERE",
            "\t\t(time BETWEEN start_time AND end_time)",
            "\t\tAND tags->>'type' = 'queue'",
            "\t\tAND (by_service = '' OR tags->>'service' = by_service)",
            ")",
            "SELECT",
            "\tCOUNT(*) AS total,",
            "\tSUM(CASE WHEN how = 'transferred' OR how = 'transfered' THEN 1 ELSE 0 END) AS total_abandoned,",
            "\tSUM(CASE WHEN how = 'transferred' OR how = 'transfered' THEN 1 ELSE 0 END) * 100 / COUNT(*) AS abandon_percent,",
            "\tCASE",
            "\t\tWHEN bucket_interval_time > 0 THEN time_bucket(bucket_interval_time * interval '1 minute', time)",
            "\t\tELSE '1970-01-01 00:00:00+00'::TIMESTAMP with time zone",
            "\tEND AS bucket",
            "FROM",
            "\tfiltered_data",
            "GROUP BY",
            "\tbucket"
        ],
        "description": "SQL Query with CTE and aggregations"
    },
    "TimeBucket": {
        "prefix": "sql-time-bucket",
        "body": [
            "time_bucket('15 minutes', time) AS bucket_start,",
            "time_bucket(by_bucket_size, time) AS bucket_start,"
        ],
        "description": "Time bucket using time_bucket function"
    },
    "SQLQueryWithDoubleCTE": {
        "prefix": "query-cte-double-with",
        "body": [
            "-- Common Table Expression",
            "WITH filtered_data AS (",
            "\tSELECT * FROM tabela1 WHERE coluna1 = 'valor'",
            "),",
            "second_filtered_data AS (",
            "\tSELECT * FROM tabela2 WHERE coluna2 = 'valor'",
            ")",
            "SELECT * FROM filtered_data JOIN second_filtered_data ON filtered_data.id = second_filtered_data.id;"
        ],
        "description": "SQL Query with Common Table Expressions (CTEs)"
    },
    "SQLQuerySetDefault": {
        "prefix": [
            "query-set-default",
            "sql-set-default"
        ],
        "body": [
            "ALTER TABLE table_name ALTER COLUMN field_name SET DEFAULT integer_value;"
        ],
        "description": "SQL Query set Default"
    }
}
