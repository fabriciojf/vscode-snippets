{
    "AjaxCake": {
        "prefix": [
            "js-cake-ajax-template",
            "javascript-cake-ajax-template"
        ],
        "body": [
            "${1:<script>}",
            "\\$.ajax({",
            "\t// method: 'POST', || 'GET', ",
            "\t// dataType: 'json', || 'xml', || 'jsonp', || 'script' ",
            "\turl: `\\${windowDomain}yourController/your_action`,",
            "\tcache: false,",
            "\tdata: {",
            "\t\t'yourParam': 'your_value'",
            "\t},",
            "\tsuccess: function(data) {",
            "\t\tconsole.log('data', data);",
            "\t},",
            "\terror: function(err) {",
            "\t\tconsole.log('error', err);",
            "\t},",
            "\tcomplete: function(xhr, status) {",
            "\t\tif (status === 'success') {",
            "\t\t\tconsole.log(xhr.responseText, xhr);",
            "\t\t} else if (status === 'error') {",
            "\t\t\tconsole.log('Erro na requisição AJAX');",
            "\t\t}",
            "\t},",
            "});"
        ],
        "description": "Ajax Cake"
    },
    "AjaxGetPost": {
        "prefix": [
            "ajax-get-post",
            "js-get-post"
        ],
        "body": [
            "${1:<script>}",
            "let _url = '<?= Router::url(array(",
            "\t\t\t'plugin' => false,",
            "\t\t\t\t'admin' => true,",
            "\t\t\t\t'controller' => 'yourController',",
            "\t\t\t\t'action' => 'your_action',",
            "\t\t\t\t), false); ?>';",
            "\\$.ajax({",
            "\t// method: 'POST', || 'GET', ",
            "\t// dataType: 'json,' || 'xml', || 'jsonp', || 'script' ",
            "\turl: `\\${windowDomain}yourController/your_action`,",
            "\tcache: false,",
            "\tdata: {",
            "\t\t'yourParam': 'your_value'",
            "\t},",
            "\tsuccess: function(data) {",
            "\t\tconsole.log('data', data);",
            "\t},",
            "\terror: function(err) {",
            "\t\tconsole.log('error', err);",
            "\t}",
            "\tcomplete: function(xhr, status) {",
            "\t\tif (status === 'success') {",
            "\t\t\tconsole.log(xhr.responseText, xhr);",
            "\t\t} else if (status === 'error') {",
            "\t\t\tconsole.log('Erro na requisição AJAX');",
            "\t\t}",
            "\t},",
            "});"
        ],
        "description": "Ajax Get Post"
    },
    "AjaxWindow": {
        "prefix": [
            "ajax-window",
            "javascript-window",
            "js-window"
        ],
        "body": [
            "${1:<script>}",
            "\\$(document).ready(function() {",
            "",
            "});"
        ],
        "description": "Ajax Window"
    },
    "NodeMethod": {
        "prefix": [
            "node-method",
            "node-class-method"
        ],
        "body": [
            "create: async (req, res) => {",
            "\ttry {",
            "\t\tres.status(200).json({ message: 'Sucesso' });",
            "\t} catch (error) {",
            "\t\tconsole.log(error);",
            "\t\tres.status(500).json({ message: 'Internal server error' });",
            "\t}",
            "}"
        ],
        "description": "Ajax Window"
    },
    "AjaxAppend": {
        "prefix": [
            "ajax-append",
            "javascript-append",
            "js-append"
        ],
        "body": [
            "${1:<script>}",
            ".append(\\$('<>').addClass('')",
            ")"
        ],
        "description": "Ajax Window"
    },
    "AjaxClass": {
        "prefix": [
            "jtemplate",
            "js-class-template"
        ],
        "body": [
            "const $TM_FILENAME_BASE = function() {",
            "\tthis.init = init;",
            "",
            "\tfunction init() {",
            "\t\tconsole.log('Class Started');",
            "\t}",
            "}",
            "",
            "module.exports = $TM_FILENAME_BASE();",
            "",
            "const c$TM_FILENAME_BASE = new $TM_FILENAME_BASE();",
            "c$TM_FILENAME_BASE.init();"
        ],
        "description": "Ajax Window"
    },
    "Node Class": {
        "prefix": [
            "ntemplate",
            "nclass"
        ],
        "body": [
            "const $TM_FILENAME_BASE = {",
            "\tfirst: async (req, res) => {",
            "\t\ttry {",
            " \t\t\tres.status(201).json({ message: '' });",
            "\t\t} catch (error) {",
            " \t\t\tres.status(500).json({ message: 'Internal server error' });",
            "\t\t}",
            "\t},",
            "};",
            "",
            "module.exports = $TM_FILENAME_BASE;"
        ],
        "description": "Node Template"
    },
    "AjaxSelectedCombo": {
        "prefix": [
            "ajax-selected-combo",
            "js-selected-combo",
            "cake-selected-combo"
        ],
        "body": [
            "${1:<script>}",
            "let id = \\$('#SELECT_ID :selected').val(),",
            "\tlabel = \\$('#SELECT_ID :selected').text();",
            "// Seleção de item pelo índice",
            "$('#agentSelect option:eq(1)').prop('selected', true);",
            "",
            "// Desabilitando item do combo pelo valor",
            "$('#agentSelect')",
            "    .find('option[value=\"\"]').prop('disabled', true);"
        ],
        "description": "Ajax Selected Combo"
    },
    "NodeClass": {
        "prefix": [
            "node-class",
            "node-class-model"
        ],
        "body": [
            "${1:<script>}",
            "const { Service } = require('../models/Service');",
            "const $TM_FILENAME_BASE = {",
            "\tcreate: function(req, res) {",
            "\t\tconsole.log(classVarName);",
            "\t\treturn res.json({status: \"success\"});",
            "\t}",
            "}",
            "module.exports = $TM_FILENAME_BASE;",
            "",
            "// Another Way",
            "'use strict';",
            "const config = require('./config/config');",
            "",
            "function FIRSTFUNCTION(param) {",
            "\tconsole.log(param);",
            "}",
            "",
            "module.exports = {",
            "\tFIRSTFUNCTION: FIRSTFUNCTION",
            "}",
            ""
        ],
        "description": "Node Class"
    },
    "NodePgPromisse": {
        "prefix": [
            "node-pg-promisse"
        ],
        "body": [
            "${1:<script>}",
            "const query = {",
            "\tname: 'set_unique_name',",
            "\ttext: \" SELECT \" +",
            "\t\t  \"   FROM users \" +",
            "\t\t  \"  WHERE name like $1 \" +",
            "\t\t  \"\t OR email like $2 \" +",
            "\t\t  \" OFFSET 1 \" +",
            "\t\t  \"  LIMIT 1 \",",
            "\tvalues: [`%\\${name}%`, `%\\${email}%`]",
            "}",
            "db.query(query)",
            "\t.then(data => { console.log(data.rows); })",
            "\t.catch(err => { console.log(err); });"
        ],
        "description": "Node Pg Promisse"
    },
    "NodePgCallback": {
        "prefix": [
            "node-pg-callback"
        ],
        "body": [
            "${1:<script>}",
            "const query = {",
            "\tname: 'set_unique_name',",
            "\ttext: \" SELECT * \" +",
            "\t\t\"   FROM users \" +",
            "\t\t\"  WHERE name like $1 \" +",
            "\t\t\"\t OR email like $2 \" +",
            "\t\t\" OFFSET 1 \" +",
            "\t\t\"  LIMIT 1 \",",
            "\tvalues: [`%\\${name}%`, `%\\${email}%`],",
            "\trowMode: 'array',",
            "}",
            "db.query(query, (err, res) => {",
            "\tif (err) {",
            "\t\tconsole.log(err.stack);",
            "\t} else {",
            "\t\tcallback(res.rows);",
            "\t}",
            "});"
        ],
        "description": "Node Pg Callback"
    },
    "AjaxModal": {
        "prefix": [
            "ajax-modal"
        ],
        "body": [
            "${1:<script>}",
            "\\$('#MODALID').modal('show');",
            "\\$('#MODALID').modal('hide');"
        ],
        "description": "Ajax Modal"
    },
    "AjaxCreateDateTime": {
        "prefix": [
            "ajax-create-datetime"
        ],
        "body": [
            "moment(new Date()).format('DD/MM/YYYY HH:mm:ss')",
            "moment(new Date(1678706562019)).format('DD/MM/YYYY HH:mm:ss')"
        ],
        "description": "Ajax Create Date Time"
    },
    "AjaxMomentDateTime": {
        "prefix": [
            "ajax-moment-datetime-examples"
        ],
        "body": [
            "${1:<script>}",
            "// Date Create",
            "moment(new Date()).format('DD/MM/YYYY HH:mm:ss')",
            "moment(new Date(1678706562019)).format('DD/MM/YYYY HH:mm:ss')",
            "",
            "// Format Dates",
            "moment().format('MMMM Do YYYY, h:mm:ss a'); // February 8th 2023, 9:06:40 am",
            "moment().format('DD/MM/YYYY hh:mm:ss ');    // 01/02/2023 14:00:10",
            "moment().format('dddd [escaped]');          // Wednesday escaped",
            "moment().format();                          // 2023-02-08T09:13:20-03:00",
            "",
            "// Relative Time",
            "moment('20111031', 'YYYYMMDD').fromNow();  // 11 years ago",
            "moment().startOf('day').fromNow();         // 9 hours ago (day, hour, etc)",
            "moment().endOf('day').fromNow();           // in 15 hours",
            "",
            "// Calendar Time",
            "moment().calendar();                       // Today at 9:07 AM",
            "moment().subtract(10, 'days').calendar();  // 01/29/2023",
            "moment().add(1, 'days').calendar();        // Tomorrow at 9:07 AM"
        ],
        "description": "Ajax Moment Format Date Time Examples"
    },
    "AjaxArrayAppendPush": {
        "prefix": [
            "ajax-array-append-push"
        ],
        "body": [
            "${1:<script>}",
            "let items = [];",
            "for (const child of children) {",
            "\titems.push(child.id);",
            "}"
        ],
        "description": "Append items into array"
    },
    "AjaxArrayFor": {
        "prefix": [
            "ajax-array-for"
        ],
        "body": [
            "${1:<script>}",
            "for (const child of children) {",
            "\tconsole.log(child)",
            "}",
            "",
            "children.forEach(function(element, i) {",
            "\tconsole.log(element)",
            "});"
        ],
        "description": "Ajax Format Date Time"
    },
    "AjaxStringReplace": {
        "prefix": [
            "ajax-string-replace"
        ],
        "body": [
            "${1:<script>}",
            "yourText.replace('this', 'for this')"
        ],
        "description": "Ajax Format Date Time"
    },
    "NodePortPattern": {
        "prefix": [
            "node-port-pattern"
        ],
        "body": [
            "${1:<script>}",
            "const port = process.env.PORT || config.port"
        ],
        "description": "Node Port Pattern"
    },
    "NodeModelMongoose": {
        "prefix": [
            "model-mongoose",
            "node-model-mongoose"
        ],
        "body": [
            "const mongoose = require('mongoose');",
            "const { ANOTHERSchema } = require('./ANOTHER');",
            "",
            "const { Schema } = mongoose;",
            "",
            "const $TM_FILENAME_BASESchema = new Schema(",
            "    {",
            "        name: {",
            "            type: String,",
            "            required: true,",
            "            trim: true,",
            "        },",
            "        status: {",
            "            type: [ANOTHERSchema],",
            "        }",
            "    },",
            "    { timestamps: true }",
            ");",
            "",
            "const $TM_FILENAME_BASE = mongoose.model('$TM_FILENAME_BASE', $TM_FILENAME_BASESchema);",
            "",
            "module.exports = {",
            "    $TM_FILENAME_BASE",
            "};"
        ],
        "description": "Node.js Model Mongoose"
    },
    "NodeToolClass": {
        "prefix": [
            "node-tools-template"
        ],
        "body": [
            "${1:<script>}",
            "const hmh = require('hmh');",
            "",
            "function formatDate(date) {",
            "\tconst year = date.getFullYear();",
            "\tconst month = String(date.getMonth() + 1).padStart(2, '0');",
            "\tconst day = String(date.getDate()).padStart(2, '0');",
            "\treturn `\\${day}/\\${month}/\\${year}`;",
            "}",
            "",
            "module.exports = {",
            "\tformatDate",
            "};"
        ],
        "description": "Node tools template"
    },
    "NodeClassDatabase": {
        "prefix": [
            "node-class-database"
        ],
        "body": [
            "${1:<script>}",
            "const db = require('./pg_connection');",
            "",
            "class $TM_FILENAME_BASEDb {",
            "\tconstructor() { }",
            "",
            "\t/**",
            "\t * Busca um usuário pelo username",
            "\t * @param {*} req request",
            "\t * @param {*} callback função de callback",
            "\t */",
            "\tasync find(req, callback) {",
            "\t\tconst username = req.params.username.trim();",
            "\t\ttry {",
            "\t\t\tconst { rows } = await db.query(`",
            "\t\t\t\tSELECT *",
            "\t\t\t\tFROM users u",
            "\t\t\t\tWHERE u.name like \\$1",
            "\t\t\t`, [username]);",
            "\t\t\tcallback(rows);",
            "\t\t} catch (err) {",
            "\t\t\tconsole.log(err);",
            "\t\t\tcallback({ error: 'SQL Error!!' });",
            "\t\t}",
            "\t}",
            "};",
            "",
            "module.exports = new $TM_FILENAME_BASEDb();"
        ],
        "description": "Node Database Class template"
    },
    "NodeTryCatch": {
        "prefix": [
            "node-try-catch",
            "try"
        ],
        "body": [
            "${1:<script>}",
            "try {",
            "",
            "} catch (err) {",
            "",
            "}"
        ],
        "description": "Node Try Catch"
    },
    "NodeClassController": {
        "prefix": [
            "node-exports"
        ],
        "body": [
            "${1:<script>}",
            "module.exports = new Controller();",
            "module.exports = {",
            "\tsaveEvent,",
            "\tsaveSlot",
            "}"
        ],
        "description": "Node Exports Function template"
    },
    "JsWhenToDate": {
        "prefix": [
            "js-when-to-date",
            "ajax-when-to-date"
        ],
        "body": [
            "${1:<script>}",
            "let time = 1678737927980,                       // 2023-03-13 20:05:27",
            "\tnowtime = new Date().getTime(),             // 1679073784226",
            "\tutc = new Date(time).toUTCString(),         // Mon, 13 Mar 2023 20:05:27 GMT",
            "\tlocal = new Date(time).toLocaleString();    // 13/03/2023, 17:05:27",
            "// moment.js",
            "console.log(moment(time).utc().format('YYYY-MM-DD HH:mm:ss'));                  // 2023-03-13 20:05:27",
            "console.log(moment(nowtime).utcOffset('-03:00').format('YYYY-MM-DD HH:mm:ss')); // São Paulo: 2023-03-13 17:05:27"
        ],
        "description": "Javascript When (int) to Date"
    },
    "NodeUseStrict": {
        "prefix": [
            "node-use-strict"
        ],
        "body": [
            "${1:<script>}",
            "'use strict';"
        ],
        "description": "Node use strict"
    },
    "NodeDateTimeUtil": {
        "prefix": [
            "node-date-time-util",
            "node-date-time-util-template"
        ],
        "body": [
            "${1:<script>}",
            "'use strict';",
            "",
            "/**",
            " * Formata uma data para o formato desejado passado como parametro format",
            " *  sem a utilizacao de bibliotecas",
            " * @param {*} date = Date()",
            " * @param {*} format = utilize os caracteres 'dd mm yyyy HH MM SS'",
            " *  ex: 'dd/mm/yyyy HH:MM:SS', 'yyyy-mm-dd HH:MM:00', etc",
            " * @returns date formatada no padrao format",
            " */",
            "function formatDate(date, format) {",
            "\tvar day = date.getDate(),",
            "\t\t\tmonth = date.getMonth() + 1,",
            "\t\tyear = date.getFullYear(),",
            "\t\thours = date.getHours(),",
            "\t\tminutes = date.getMinutes(),",
            "\t\tseconds = date.getSeconds(),",
            "\t\tformDate = format;",
            "\tformDate = formDate.replace('dd', day < 10 ? '0' + day : day);",
            "\tformDate = formDate.replace('mm', month < 10 ? '0' + month : month);",
            "\tformDate = formDate.replace('yyyy', year);",
            "\tformDate = formDate.replace('HH', hours < 10 ? '0' + hours : hours);",
            "\tformDate = formDate.replace('MM', minutes < 10 ? '0' + minutes : minutes);",
            "\tformDate = formDate.replace('SS', seconds < 10 ? '0' + seconds : seconds);",
            "\treturn formDate;",
            "}",
            "",
            "// module exports",
            "module.exports = {",
            "\tformatDate: formatDate",
            "};"
        ],
        "description": "Node Date Time Util"
    },
    "NodeCrudMongo": {
        "prefix": "node-crud",
        "body": [
            "const { $TM_FILENAME_BASE: $TM_FILENAME_BASEModel } = require('../models/$TM_FILENAME_BASE');",
            "",
            "const $TM_FILENAME_BASEController = {",
            "",
            "    create: async (req, res) => {",
            "        try {",
            "            const $TM_FILENAME_BASE = {",
            "                name: req.body.name,",
            "                data: req.body.data,",
            "            };",
            "            const response = await $TM_FILENAME_BASEModel.create($TM_FILENAME_BASE);",
            "",
            "            res.status(201).json({response, message: 'Contato criado com sucesso!'});",
            "        } catch (error) {",
            "            console.log(error);",
            "            res.status(500).json({ message: 'Internal server error' });",
            "        }",
            "    },",
            "    getAll: async (req, res) => {",
            "        try {",
            "            const $TM_FILENAME_BASEs = await $TM_FILENAME_BASEModel.find();",
            "            res.status(200).json($TM_FILENAME_BASEs);",
            "        } catch (error) {",
            "            console.log(error);",
            "            res.status(500).json({ message: 'Internal server error' });",
            "        }",
            "    },",
            "    get: async (req, res) => {",
            "        try {",
            "            const { id } = req.params;",
            "            const $TM_FILENAME_BASE = await $TM_FILENAME_BASEModel.findById(id);",
            "            if (!$TM_FILENAME_BASE) {",
            "                res.status(404).json({ message: 'Contato não encontrado' });",
            "                return;",
            "            }",
            "            res.status(200).json($TM_FILENAME_BASE);",
            "        } catch (error) {",
            "            console.log(error);",
            "            res.status(500).json({ message: 'Internal server error' });",
            "        }",
            "    },",
            "    delete: async (req, res) => {",
            "        try {",
            "            const { id } = req.params;",
            "            const $TM_FILENAME_BASE = await $TM_FILENAME_BASEModel.findById(id);",
            "            if (!$TM_FILENAME_BASE) {",
            "                res.status(404).json({ message: 'Contato não encontrado' });",
            "                return;",
            "            }",
            "            const deleted$TM_FILENAME_BASE = await $TM_FILENAME_BASEModel.findByIdAndDelete(id);",
            "            res.status(200).json({deleted$TM_FILENAME_BASE, message: 'Contato deletado com sucesso!'});",
            "        } catch (error) {",
            "            console.log(error);",
            "            res.status(500).json({ message: 'Internal server error' });",
            "        }",
            "    },",
            "    update: async (req, res) => {",
            "        try {",
            "            const { id } = req.params;",
            "",
            "            const $TM_FILENAME_BASE = {",
            "                name: req.body.name,",
            "                data: req.body.data,",
            "            };",
            "",
            "            const updatedContact = await ContactModel.findByIdAndUpdate(id, $TM_FILENAME_BASE);",
            "            if (!updatedContact) {",
            "                res.status(404).json({ message: 'Contato não encontrado' });",
            "                return;",
            "            }",
            "",
            "            res.status(200).json({$TM_FILENAME_BASE, message: 'Contato atualizado com sucesso!'});",
            "        } catch (error) {",
            "            console.log(error);",
            "            res.status(500).json({ message: 'Internal server error' });",
            "        }",
            "    }",
            "}",
            "",
            "module.exports = $TM_FILENAME_BASEController;"
        ],
        "description": "Node.js Crud Mongo"
    },
    "NodeStaticClass": {
        "prefix": "fmt",
        "body": [
            "${1:<script>}",
            "'use strict';",
            "",
            "const config = require('../config/config');",
            "",
            "class MyClass {",
            "",
            "\tstatic counter = 9988;",
            "\tconstructor() {}",
            "",
            "\tstatic async _getString(mystring) {",
            "\t\treturn await mystring;",
            "\t}",
            "",
            "\tstatic async format(req, res) {",
            "\t\tlet teste = await MyClass._getString(MyClass.counter);",
            "\t\tlet aa = {",
            "\t\t\tmessage: teste,",
            "\t\t\tval1: MyClass.counter",
            "\t\t};",
            "",
            "\t\tMyClass.counter++;",
            "\t\taa['val2'] = MyClass.counter;",
            "\t\tres.json(aa);",
            "\t}",
            "}",
            "",
            "module.exports = MyClass;"
        ],
        "description": "Formats data and sends a JSON response"
    },
    "NodeJsonPropertiesFor": {
        "prefix": [
            "node-for-json-properties",
            "node-for-properties",
            "js-for-properties"
        ],
        "body": [
            "for (let key in items) {",
            "\tconst value = items[key];",
            "\tconsole.log(key, value);",
            "}"
        ],
        "description": "Iterates over object properties and logs key-value pairs"
    },
    "NodeConvertJsonArrayToInValues": {
        "prefix": "node-convert-json-array-to-in-values",
        "body": [
            "${1:<script>}",
            "convertJsonArrayToInValues(req) {",
            "\tconst keys = req.body;",
            "\tconst query = `SELECT * FROM table WHERE field IN (\\${keys.map((_, index) => `\\$\\${index + 1}`).join(',')})`;",
            "\treturn await executeQuery(query, keys);",
            "}"
        ],
        "description": "Converts a JSON array into an IN clause for a SQL query"
    },
    "JavascriptCakeUrl": {
        "prefix": [
            "javascript-cake-url",
            "js-cake-url"
        ],
        "body": [
            "${1:<script>}",
            "let _url = '<?= Router::url(array(",
            "\t'plugin' => false,",
            "\t'admin' => true,",
            "\t'controller' => 'yourController',",
            "\t'action' => 'your_action',",
            "), false); ?>';"
        ],
        "description": "Generates a URL using Router::url with specific parameters"
    },
    "node-static-class": {
        "prefix": "node-static-class",
        "body": [
            "${1:<script>}",
            "const config = require('../config');\n",
            "class MyClass {",
            "\tstatic async methodOne(param) {",
            "\t\tawait MyClass.methodTwo(param);",
            "\t}",
            "",
            "\tstatic async methodTwo(param) {",
            "\t\tconsole.log(param);",
            "\t}",
            "",
            "\tstatic _privateMethod() {",
            "\t\tconsole.log('To private use _methodName()');",
            "\t}",
            "}\n",
            "module.exports = MyClass;\n"
        ],
        "description": "Create a class with static methods in Node.js"
    },
    "dates-function": {
        "prefix": "node-dates-manipulations",
        "body": [
            "${1:<script>}",
            "function dates() {",
            "\t// current date",
            "\tconst now = new Date(),",
            "",
            "\t// first hour of day",
            "\tfirstHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0),",
            "\tfirstHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0),",
            "",
            "\t// last hour of day",
            "\tlastHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59),",
            "\tlastHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 23, 59, 59),",
            "",
            "\t// format first hour of day",
            "\t// const moment = require('moment');",
            "\tformatted = moment(firstHourOfDay).format('YYYY-MM-DD HH:mm:ss'),",
            "",
            "\t// criando a data a partir de uma string",
            "\tdateString = '2023-07-07 14:45:10',",
            "\tformattedDateString = dateString.replace(' ', 'T'),",
            "\tdateObject = new Date(formattedDateString);",
            "}"
        ],
        "description": "Perform date operations"
    },
    "string-to-date": {
        "prefix": "node-string-to-date",
        "body": [
            "${1:<script>}",
            "\t// criando a data a partir de uma string",
            "\tconst dateString = '2023-07-07 14:45:10',",
            "\tformattedDateString = dateString.replace(' ', 'T'),",
            "\tdateObject = new Date(formattedDateString);"
        ],
        "description": "Convert String to Date"
    },
    "first-last-dates": {
        "prefix": "node-fisrt-last-hours-of-day",
        "body": [
            "${1:<script>}",
            "function dates() {",
            "\t// current date",
            "\tconst now = new Date(),",
            "",
            "\t// first hour of day",
            "\tfirstHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0),",
            "\tfirstHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0),",
            "",
            "\t// last hour of day",
            "\tlastHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59),",
            "\tlastHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 23, 59, 59);"
        ],
        "description": "Node Fisrt and Last Hours of Day"
    },
    "dates-format": {
        "prefix": "node-format-date",
        "body": [
            "${1:<script>}",
            "\t// format date using moment.js",
            "\t// const moment = require('moment');",
            "\tconst formatted = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');"
        ],
        "description": "Perform date operations"
    },
    "iterate-json-object": {
        "prefix": [
            "js-for-json-object",
            "ajax-for-json-object",
            "javascript-for-json-object"
        ],
        "body": [
            "${1:<script>}",
            "let json = JSON.parse(data);",
            "for (let key in json) {",
            "\tif (json.hasOwnProperty(key)) {",
            "\t\tlet value = json[key];",
            "\t\tconsole.log(`Chave: \\${key}, Valor: \\${value}`);",
            "\t}",
            "}"
        ],
        "description": "Iterate over the properties of a JSON object and log key-value pairs"
    },
    "js-switch-statement": {
        "prefix": [
            "js-case-switch",
            "javascript-case-switch"
        ],
        "body": [
            "${1:<script>}",
            "switch (param) {",
            "\tcase 'term1':",
            "\t\tconsole.log('Term 1');",
            "\t\tbreak;",
            "\t",
            "\tdefault:",
            "\t\tconsole.log('Default');",
            "\t\tbreak;",
            "}"
        ],
        "description": "Switch statement example"
    },
    "RouterURLs": {
        "prefix": [
            "js-router-urls",
            "js-cake-router"
        ],
        "body": [
            "${1:<script>}",
            "// basic router, true with http",
            "<?= Router::url('/', true) ?>",
            "",
            "// class router, false without http",
            "<?= Router::url(array(",
            "\t'plugin' => false,",
            "\t'admin' => true,",
            "\t'controller' => 'domni_contacts',",
            "\t'action' => 'close_open_contacts',",
            "), false); ?>"
        ],
        "description": "Router URLs with different options"
    },
    "LocalStorageCompleteExample": {
        "prefix": "js-storage-complete-example",
        "body": [
            "${1:<script>}",
            "// Armazenar um valor no LocalStorage",
            "localStorage.setItem('nome', 'João');",
            "localStorage.setItem('idade', '30');",
            "localStorage.setItem('cidade', 'São Paulo');",
            "",
            "// Recuperar o valor do LocalStorage",
            "const nome = localStorage.getItem('nome');",
            "console.log('Nome:', nome); // Saída: \"Nome: João\"",
            "",
            "const idade = localStorage.getItem('idade');",
            "console.log('Idade:', idade); // Saída: \"Idade: 30\"",
            "",
            "// Remover um item do LocalStorage",
            "localStorage.removeItem('cidade');",
            "",
            "// Recuperar o valor do item removido (deve ser null)",
            "const cidadeRemovida = localStorage.getItem('cidade');",
            "console.log('Cidade Removida:', cidadeRemovida); // Saída: \"Cidade Removida: null\"",
            "",
            "// Limpar todo o LocalStorage",
            "localStorage.clear();",
            "",
            "// Verificar o número de itens armazenados (deve ser 0 após o clear)",
            "const numItens = localStorage.length;",
            "console.log('Número de Itens:', numItens); // Saída: \"Número de Itens: 0\"",
            "",
            "// Armazenar mais valores no LocalStorage",
            "localStorage.setItem('profissao', 'Engenheiro');",
            "localStorage.setItem('email', 'joao@example.com');",
            "",
            "// Recuperar o valor de um item através do índice (chave no índice 1)",
            "const chaveNoIndice1 = localStorage.key(1);",
            "console.log('Chave no Índice 1:', chaveNoIndice1); // Saída: \"Chave no Índice 1: email\""
        ],
        "description": "Exemplo de uso de SET do localStorage"
    },
    "LocalStorageSetExample": {
        "prefix": "js-storage-set",
        "body": [
            "${1:<script>}",
            "// Armazenar um valor no SessionStorage",
            "localStorage.setItem('paginaAtiva', 'paginaPrincipal');"
        ],
        "description": "Exemplo de uso de SET do localStorage"
    },
    "LocalStorageGetExample": {
        "prefix": "js-storage-get",
        "body": [
            "${1:<script>}",
            "// Recuperar o valor do SessionStorage",
            "const paginaAtiva = localStorage.getItem('paginaAtiva');"
        ],
        "description": "Exemplo de uso de GET do localStorage"
    },
    "LocalStorageDeleteClearExample": {
        "prefix": [
            "js-storage-delete",
            "js-storage-clear",
            "js-storage-remove-item"
        ],
        "body": [
            "${1:<script>}",
            "// Remover um item do SessionStorage",
            "sessionStorage.removeItem('cidade');",
            "",
            "// Limpar todo o SessionStorage",
            "sessionStorage.clear();"
        ],
        "description": "Exemplo de uso de GET do localStorage"
    },
    "CSRFTokenExample": {
        "prefix": [
            "js-csrf-token-example",
            "js-ajax-post-csrf-token-example",
            "cake-post-token-example",
            "cake-ajax-post-csrf-token-example"
        ],
        "body": [
            "${1:<script>}",
            "public \\$components = array('Security');",
            "",
            "// Em um controlador do CakePHP",
            "public function myAction() {",
            "\t\\$csrfToken = \\$this->Security->generateToken(\\$this->request);",
            "\t\\$this->set('csrfToken', \\$csrfToken);",
            "}",
            "",
            "<script>",
            "\t$(document).ready(function() {",
            "\t\tvar csrfToken = '<?php echo \\$csrfToken; ?>';",
            "\t\t\\$.ajax({",
            "\t\t\turl: '/controller/action',",
            "\t\t\tmethod: 'POST',",
            "\t\t\theaders: {",
            "\t\t\t\t'X-CSRF-Token': csrfToken",
            "\t\t\t},",
            "\t\t\tdata: {},",
            "\t\t\tsuccess: function(response) {},",
            "\t\t\terror: function(xhr, status, error) {}",
            "\t\t});",
            "\t});",
            "</script>"
        ],
        "description": "Exemplo de uso do CSRF Token com CakePHP e AJAX"
    },
    "storageExample": {
        "prefix": [
            "js-storage-update",
            "js-agent-storage-update"
        ],
        "body": [
            "${1:<script>}",
            "const storage = new PortalStorage();",
            "// offline, in_service, inviting_assistant, in_assistant, in_pause ",
            "storage.update(query.cid, 'status', 'offline');"
        ],
        "description": "Exemplo de uso de GET do localStorage"
    },
    "isArray": {
        "prefix": [
            "js-is-array"
        ],
        "body": [
            "${1:<script>}",
            "const item = [1, 2, 3];",
            "if (Array.isArray(item)) {",
            "\tconsole.log(\"O item é um array.\");",
            "} else {",
            "\tconsole.log(\"O item não é um array.\");",
            "}"
        ],
        "description": "Verifica se o item é um array"
    },
    "isString": {
        "prefix": [
            "js-is-string"
        ],
        "body": [
            "${1:<script>}",
            "const item = \"Hello, world!\";",
            "if (typeof item === \"string\") {",
            "\tconsole.log(\"O item é uma string.\");",
            "} else {",
            "\tconsole.log(\"O item não é uma string.\");",
            "}"
        ],
        "description": "Verifica se o item é uma String"
    },
    "isJsonObject": {
        "prefix": [
            "js-is-json-object"
        ],
        "body": [
            "${1:<script>}",
            "const json = {message:{id:1,text:\"123\"}};",
            "if (typeof json.message === 'object') {",
            "\tconsole.log('is object');",
            "} else {",
            "\tconsole.log('is string');",
            "}",
            "if (typeof json.message.text === 'object') {",
            "\tconsole.log('is object');",
            "} else {",
            "\tconsole.log('is string');",
            "}"
        ],
        "description": "Verifica se o item é uma String"
    },
    "getTimestamp": {
        "prefix": [
            "js-timestamp",
            "js-timestamp-now"
        ],
        "body": [
            "${1:<script>}",
            "// padrao domni",
            "let timestamp = Date.now();",
            "let dateTime = moment(timestamp).format('DD/MM HH:mm');"
        ],
        "description": "Exemplo de uso de GET do localStorage"
    },
    "milisegundosToHour": {
        "prefix": [
            "js-milisegundos-to-hour",
            "js-convert-milisegundos"
        ],
        "body": [
            "${1:<script>}",
            "const durationBase = moment.duration(durationInMilisegundos);",
            "const durationUtc = moment.utc(durationBase.asMilliseconds());",
            "duration = durationUtc.format(\"HH:mm:ss\");"
        ],
        "description": "Milisegundos to Hour"
    },
    "jsActiveCid": {
        "prefix": [
            "js-active-contact-get-cid",
            "js-get-current-cid"
        ],
        "body": [
            "${1:<script>}",
            "let activeContact = windowAgentInstance.getActiveContact().get();",
            "// activeContact.cid .who or .type (widgetType)"
        ],
        "description": "Milisegundos to Hour"
    },
    "jsDomain": {
        "prefix": [
            "js-domain"
        ],
        "body": [
            "${1:<script>}",
            "url: `\\${windowDomain}controller/action`,"
        ],
        "description": "Milisegundos to Hour"
    },
    "jsLowercase": {
        "prefix": [
            "js-to-lowercase",
            "js-tolowercase",
            "js-to-uppercase",
            "js-touppercase"
        ],
        "body": [
            "var minusculo = text.toLowerCase();",
            "var maiusculo = text.toUpperCase();"
        ],
        "description": "Milisegundos to Hour"
    },
    "modalShowHide": {
        "prefix": [
            "js-modal-show-hide"
        ],
        "body": [
            "${1:<script>}",
            "\\$('#email-reply').modal('show');",
            "\\$('#email-reply').modal('hide');"
        ],
        "description": "Modal Show Hide Example"
    },
    "jsClone": {
        "prefix": "js-clone-object",
        "body": [
            "const clone = Object.assign({}, originalObj);",
            "conf = dnkapi.clone(originalObj); // deep clone"
        ],
        "description": "Exemplo de clonagem rasa de objeto em JavaScript"
    },
    "DeepClone": {
        "prefix": "deep-clone",
        "body": [
            "function clone(obj) {",
            "\tif (obj === null || typeof obj !== 'object') {",
            "\t\treturn obj;",
            "\t}",
            "\tif (Array.isArray(obj)) {",
            "\t\tconst newArr = [];",
            "\t\tfor (let i = 0; i < obj.length; i++) {",
            "\t\t\tnewArr[i] = clone(obj[i]);",
            "\t\t}",
            "\t\treturn newArr;",
            "\t}",
            "\tconst newObj = {};",
            "\tfor (let key in obj) {",
            "\t\tif (obj.hasOwnProperty(key)) {",
            "\t\t\tnewObj[key] = clone(obj[key]);",
            "\t\t}",
            "\t}",
            "\treturn newObj;",
            "}"
        ],
        "description": "Função para clonagem profunda de objetos em JavaScript"
    },
    "AjaxFormSubmit": {
        "prefix": [
            "js-form-send",
            "js-form-submit"
        ],
        "body": [
            "\\$('#form_id').submit(function (e) {",
            "\tvar formData = \\$(this).serialize();",
            "\te.preventDefault();",
            "\t\\$.ajax({",
            "\t\ttype: 'POST',",
            "\t\turl: `\\${windowDomain}controller/action`,",
            "\t\tdata: formData,",
            "\t\tsuccess: function (_data) {",
            "\t\t\tconsole.log(_data);",
            "\t\t},",
            "\t\terror: function (err) {",
            "\t\t\tconsole.log(err);",
            "\t\t}",
            "\t});",
            "\treturn false;",
            "});"
        ],
        "description": "Exemplo de submissão de formulário via Ajax com jQuery"
    },
    "CheckSubstring": {
        "prefix": [
            "js-contains",
            "js-string-contains"
        ],
        "body": [
            "if (mainString.includes(substring)) {",
            "\tconsole.log(\"A string contém a substring.\");",
            "} else {",
            "\tconsole.log(\"A string não contém a substring.\");",
            "}"
        ],
        "description": "Verifica se uma string contém uma substring em JavaScript"
    },
    "AppendMessage": {
        "prefix": [
            "js-message-success",
            "js-message-good",
            "js-message-error",
            "js-message-bad"
        ],
        "body": [
            "\\$('#tab_1')",
            "\t.append(\\$('<div>').addClass('message').attr('id', 'goodMessage').text('Serviço foi salvo com sucesso'))",
            "\t.append(\\$('<div>').addClass('message').attr('id', 'badMessage').text('Erro ao Salvar Serviço'));",
            "setInterval(() => {",
            "\t\\$('#goodMessage').remove();",
            "}, 1000);"
        ],
        "description": "Adiciona uma mensagem de sucesso ou erro usando jQuery"
    },
    "StringJoin": {
        "prefix": [
            "js-join-items",
            "js-string-join"
        ],
        "body": [
            "const array = ['item1', 'item2', 'item3'];",
            "const result = array.join(', ');",
            "",
            "console.log(result); // Saída: \"item1, item2, item3\""
        ],
        "description": "Join array elements with commas"
    },
    "Select2Js": {
        "prefix": [
            "js-select2",
            "js-select2-prepend-selected"
        ],
        "body": [
            "${1:<script>}",
            "<div class=\"col-sm-9\">",
            "  <?= $this->Form->input('user_id', array(",
            "    'id' => 'user_id_lookup',",
            "    'label' => false,",
            "    'class' => 'form-control',",
            "  )); ?>",
            "</div>",
            "<?php",
            "$users = $this->Api->findToJson('list', 'User', array('id', 'name'), array('User.role_id' => 2), array('name' => 'asc'));",
            "?>",
            "",
            "$('#user_id_lookup').prepend('<option value=\"\"></option>');",
            "",
            "$('#user_id_lookup').select2({",
            "  width: 'calc(100% - 45px)',",
            "  allowClear: true,",
            "  language: {",
            "    errorLoading: function () {",
            "      var newOption = new Option('', '', false, false);",
            "      $('#user_id_lookup').append(newOption).trigger('change');",
            "    },",
            "    noResults: function () {",
            "      var newOption = new Option('', '', false, false);",
            "      $('#user_id_lookup').append(newOption).trigger('change');",
            "    }",
            "  },",
            "  escapeMarkup: function (markup) {",
            "    return markup;",
            "  },",
            "  placeholder: '',",
            "  data: query.users",
            "});",
            "",
            "$('#user_id_lookup').on('change', function () {",
            "  console.log('Val Op1', $(this).val());",
            "",
            "  var selectedData = $(this).select2('data');",
            "  if (selectedData && selectedData.length > 0) {",
            "    console.log('Label', selectedData[0].text);",
            "    console.log('Val Op2', selectedData[0].id);",
            "  }",
            "});",
            "",
            "function selectedItem() {",
            "  var selectedData = $(this).select2('data');",
            "  if (selectedData && selectedData.length > 0) {",
            "    console.log('Label', selectedData[0].text);",
            "    console.log('Val Op2', selectedData[0].id);",
            "  }",
            "}",
            "",
            "$('#user_id_lookup').val(query.userId).trigger('change');"
        ],
        "description": "JavaScript function to initialize Select2"
    },
    "react-class": {
        "prefix": "r-class",
        "body": [
            "function $0(props) {",
            "\treturn (",
            "\t\t<>",
            "\t\t\t",
            "\t\t</>",
            "\t);",
            "}",
            "export default CLASS_NAME;"
        ],
        "description": "React class"
    },
    "react-dot": {
        "prefix": ".",
        "body": [
            "<div className=\"$0\"></div>"
        ],
        "description": "React div"
    },
    "react-div": {
        "prefix": "div",
        "body": [
            "<div>$0</div>"
        ],
        "description": "React div"
    },
    "react-h1": {
        "prefix": "h1",
        "body": [
            "<h1>$0</h1>"
        ],
        "description": "React h1"
    },
    "react-h2": {
        "prefix": "h2",
        "body": [
            "<h2>$0</h2>"
        ],
        "description": "React h2"
    },
    "react-p": {
        "prefix": "p",
        "body": [
            "<p>$0</p>"
        ],
        "description": "React p"
    },
    "react-label": {
        "prefix": "label",
        "body": [
            "<label>$0</label>"
        ],
        "description": "React label"
    },
    "react-button": {
        "prefix": "button",
        "body": [
            "<button onClick=\"{}\">$0</button>"
        ],
        "description": "React Button"
    },
    "react-form": {
        "prefix": "form",
        "body": [
            "<form onSubmit={$0}>",
            "\t<div>",
            "\t\t<input type=\"text\" placeholder=\"\" />",
            "\t</div>",
            "\t<div>",
            "\t\t<input type=\"submit\" value=\"Enviar\" />",
            "\t</div>",
            "</form>"
        ],
        "description": "React Form"
    },
    "react-ul": {
        "prefix": "ul",
        "body": [
            "<ul className={}>",
            "\t<li></li>",
            "\t<li></li>",
            "</ul>"
        ],
        "description": "React Ul"
    },
    "react-li": {
        "prefix": "li",
        "body": [
            "<li></li>"
        ],
        "description": "React li"
    },
    "react-import": {
        "prefix": [
            "import",
            "rimport"
        ],
        "body": [
            "import $0 from \"./components/\""
        ],
        "description": "React Import"
    },
    "react-img": {
        "prefix": "img",
        "body": [
            "<img src=\"$0\" alt=\"\"/>"
        ],
        "description": "React label"
    },
    "Noje Join": {
        "prefix": [
            "njoin",
            "jjoin",
            "rjoin"
        ],
        "body": [
            "const service = ['s1', 's2', 's3'];",
            "const formattedString = service.map(item => `'\\${item}'`).join(', ');"
        ],
        "description": "Node join"
    },
    "Postgres Function": {
        "prefix": [
            "pquery-function",
            "pquery",
            "nquery",
            "nfunction"
        ],
        "body": [
            "lostContacts: async (req, res) => {",
            "\ttry {",
            "\t\tconst { services } = req.query;",
            "\t\tif (services === undefined) {",
            "\t\t\treturn res.json({ message: 'É necessário informar o serviço' });",
            "\t\t}",
            "",
            "\t\tconst formattedServices = services.split(',').map((service) => `${service}`).join(',');",
            "\t\tconst query = 'select * from metric_contacts_received_automatic($1, $2, $3)';",
            "\t\tconst values = [getCurrentDay().start, getCurrentDay().end, formattedServices.split(',')];",
            "",
            "\t\tresult = await timeSeries.query(query, values);",
            "\t\tres.status(201).json(result.rows);",
            "",
            "\t} catch (error) {",
            "\t\tres.status(500).json({ error, message: 'Internal server error' });",
            "\t}",
            "}"
        ],
        "description": "Node join"
    },
    "MongoFields": {
        "prefix": [
            "mongo-fields"
        ],
        "body": [
            "type: Schema.Types.Mixed",
            "type: String",
            "type: Number"
        ],
        "description": "Mongo Fields"
    },
    "MongoFieldMixed": {
        "prefix": [
            "mongo-field-mixed"
        ],
        "body": [
            "type: Schema.Types.Mixed"
        ],
        "description": "Mongo Field Mixed"
    },
    "MongoFind": {
        "prefix": [
            "mongo-find",
            "node-find-mongo"
        ],
        "body": [
            "find: async (req, res) => {",
            "    try {",
            "        const { id } = req.params;",
            "        if (!id) {",
            "            return res.status(404).json({ message: 'ID Inválido' });",
            "        }",
            "",
            "        const query = {",
            "            id: id,",
            "        };",
            "",
            "        const items = await Model.find(query).sort({ createdAt: -1 });",
            "",
            "        if (items.length === 0) {",
            "            console.log('Item não encontrado', query);",
            "            res.status(404).json({ message: 'Item não encontrado' });",
            "            return;",
            "        }",
            "        res.status(200).json(items);",
            "    } catch (error) {",
            "        console.log(error);",
            "        res.status(500).json({ message: 'Internal server error' });",
            "    }",
            "}"
        ],
        "description": "Ajax Selected Combo"
    },

    "MongoInsert": {
        "prefix": [
            "mongo-insert",
            "node-insert-mongo"
        ],
        "body": [
            "insert: async (req, res) => {",
            "    try {",
            "        const item = req.body;",
            "",
            "        const objectItem = {",
            "            cid: item.cid,",
            "            data: item",
            "        }",
            "",
            "        const response = await Model.create(objectItem);",
            "        res.status(201).json({ response, message: 'Registro criado com sucesso!' });",
            "    } catch (error) {",
            "        console.log(error);",
            "        res.status(500).json({ message: 'Internal server error' });",
            "    }",
            "}"
        ],
        "description": "Ajax Selected Combo"
    },
    "MongoUpdate": {
        "prefix": [
            "mongo-update",
            "node-update-mongo"
        ],
        "body": [
            "update: async (req, res) => {",
            "    try {",
            "        const { id } = req.params;",
            "        const data = req.body;",
            "        if (!id) {",
            "            return res.status(404).json({ message: 'ID Inválido' });",
            "        }",
            "",
            "        const updatedItem = await Model.findOne({ id });",
            "        if (!updatedItem) {",
            "            res.status(404).json({ message: 'Registro não encontrado' });",
            "            return;",
            "        }",
            "",
            "        for (let key in data) {",
            "            updatedItem.data[key] = data[key];",
            "        }",
            "",
            "        await Model.findByIdAndUpdate(updatedItem._id, updatedItem);",
            "",
            "        res.status(200).json({ newItem, message: 'Registro atualizado com sucesso!' });",
            "    } catch (error) {",
            "        console.log(error);",
            "        res.status(500).json({ message: 'Internal server error' });",
            "    }",
            "}"
        ],
        "description": "Ajax Selected Combo"
    },
    "MongoDelete": {
        "prefix": [
            "mongo-delete",
            "node-delete-mongo"
        ],
        "body": [
            "delete: async (req, res) => {",
            "    try {",
            "        const { cid } = req.params;",
            "        if (!cid) { return res.status(404).json({ message: 'Cid Inválido' }); } ",
            "",
            "        const item = await Model.findOne({ cid });",
            "",
            "        if (!item) {",
            "            return res.status(404).json({ message: 'Registro não encontrado' });",
            "        }",
            "",
            "        const deletedItem = await Model.findByIdAndDelete(item.id);",
            "        res.status(200).json({ deletedItem, message: 'Registro deletado com sucesso!' });",
            "    } catch (error) {",
            "        console.log(error);",
            "        res.status(500).json({ message: 'Internal server error' });",
            "    }",
            "}"
        ],
        "description": "Ajax Selected Combo"
    },
    "MongoAppendLog": {
        "prefix": [
            "mongo-append-log",
            "append-log"
        ],
        "body": [
            "appendLog('', JSON.stringify(response));"
        ],
        "description": "Appendando logs no console"
    },
    "MongoAppendErr": {
        "prefix": [
            "mongo-append-err",
            "append-err",
            "error-log",
            "mongo-error-log"
        ],
        "body": [
            "appendError('', JSON.stringify(err));"
        ],
        "description": "Appendando logs no console"
    },
    "NodeElasticLogger": {
        "prefix": [
            "logger-elastic",
            "log-elastic",
            "node-logger-elastic"
        ],
        "body": [
            "logInfo('Class.Action', {json: 'data'});"
        ],
        "description": "Adicionando logger ao elastic"
    },
    "UseState": {
        "prefix": [
            "r-state",
            "r-useState"
        ],
        "body": [
            "// import React, { useState } from 'react';",
            "const [isConnected, setIsConnected] = useState(false);"
        ],
        "description": "Utilizando State"
    },
    "UseDomni": {
        "prefix": [
            "r-domni",
            "r-useDomni"
        ],
        "body": [
            "// import {useDomni} from '../contexts/DomniContext';",
            "const { connect, create, disconnect, registerJoin, sendMessage } = useDomni();"
        ],
        "description": "Utilizando State"
    },
    "ViewPort": {
        "prefix": [
            "r-view-port",
            "r-list-view-port"
        ],
        "body": [
            "<Viewport>",
            "\t<Grid container spacing={2} sx={{ px: 1 }}>",
            "\t\t<Grid item xs={3}>",
            "\t\t\t<Paper elevation={6} style={{ height: \"100%\" }}>",
            "\t\t\t\t<List>",
            "\t\t\t\t\t<ListItem button>",
            "\t\t\t\t\t\t<ListItemIcon>",
            "\t\t\t\t\t\t\t<MailOutlineIcon />",
            "\t\t\t\t\t\t</ListItemIcon>",
            "\t\t\t\t\t\t<ListItemText primary=\"Caixa de entrada\" />",
            "\t\t\t\t\t</ListItem>",
            "\t\t\t\t\t<ListItem button>",
            "\t\t\t\t\t\t<ListItemIcon>",
            "\t\t\t\t\t\t\t<SendIcon />",
            "\t\t\t\t\t\t</ListItemIcon>",
            "\t\t\t\t\t\t<ListItemText primary=\"Enviados\" />",
            "\t\t\t\t\t</ListItem>",
            "\t\t\t\t\t<ListItem button>",
            "\t\t\t\t\t\t<ListItemIcon>",
            "\t\t\t\t\t\t\t<DraftsIcon />",
            "\t\t\t\t\t\t</ListItemIcon>",
            "\t\t\t\t\t\t<ListItemText primary=\"Rascunhos\" />",
            "\t\t\t\t\t</ListItem>",
            "\t\t\t\t</List>",
            "\t\t\t</Paper>",
            "\t\t</Grid>",
            "\t\t<Grid item container spacing={2} xs={9}>",
            "\t\t\t{/* Add content here */}",
            "\t\t</Grid>",
            "\t</Grid>",
            "</Viewport>"
        ],
        "description": "React component with Material-UI Grid and List"
    },
    "List": {
        "prefix": [
            "r-list"
        ],
        "body": [
            "<Paper elevation={6} style={{ height: \"100%\" }}>",
            "\t<List>",
            "\t\t<ListItem button>",
            "\t\t\t<ListItemIcon>",
            "\t\t\t\t<MailOutlineIcon />",
            "\t\t\t</ListItemIcon>",
            "\t\t\t<ListItemText primary=\"Caixa de entrada\" />",
            "\t\t</ListItem>",
            "\t\t<ListItem button>",
            "\t\t\t<ListItemIcon>",
            "\t\t\t\t<SendIcon />",
            "\t\t\t</ListItemIcon>",
            "\t\t\t<ListItemText primary=\"Enviados\" />",
            "\t\t</ListItem>",
            "\t\t<ListItem button>",
            "\t\t\t<ListItemIcon>",
            "\t\t\t\t<DraftsIcon />",
            "\t\t\t</ListItemIcon>",
            "\t\t\t<ListItemText primary=\"Rascunhos\" />",
            "\t\t</ListItem>",
            "\t</List>",
            "</Paper>"
        ],
        "description": "React component with Material-UI Grid and List"
    },
    "StyleImport": {
        "prefix": [
            "r-style",
            "r-sass"
        ],
        "body": [
            "import styles from '../styles/Panel.module.sass';"
        ],
        "description": "Importando Style dentro do React"
    }
}