{
    "AjaxCake": {
        "prefix": [
            "js-cake-ajax-template",
            "javascript-cake-ajax-template"
        ],
        "body": [
            "$.ajax({",
            "\t// type: 'POST', || 'GET', ",
            "\t// dataType: 'json,' || 'xml', || 'jsonp', || 'script' ",
            "\turl: `\\${domain}yourController/your_action`,",
            "\tcache: false,",
            "\tdata: {",
            "\t\t'yourParam': 'your_value'",
            "\t},",
            "\tsuccess: function(data) {",
            "\t\tconsole.log('data', data);",
            "\t},",
            "\terror: function(err) {",
            "\t\tconsole.log('error', err);",
            "\t}",
            "});"
        ],
        "description": "Ajax Cake"
    },
    "AjaxGetPost": {
        "prefix": [
            "ajax-get-post",
            "js-get-post"
        ],
        "body": [
            "let _url = '<?= Router::url(array(",
            "                'plugin' => false,",
            "                'admin' => true,",
            "                'controller' => 'yourController',",
            "                'action' => 'your_action',",
            "            ), false); ?>';",
            "$.ajax({",
            "    // type: 'POST', || 'GET', ",
            "    // dataType: 'json,' || 'xml', || 'jsonp', || 'script' ",
            "\turl: `\\${domain}yourController/your_action`,",
            "    cache: false,",
            "    data: {",
            "        'yourParam': 'your_value'",
            "    },",
            "    success: function(data) {",
            "        console.log('data', data);",
            "    },",
            "    error: function(err) {",
            "        console.log('error', err);",
            "    }",
            "});"
        ],
        "description": "Ajax Get Post"
    },
    "AjaxWindow": {
        "prefix": [
            "ajax-window",
            "javascript-window",
            "js-window"
        ],
        "body": [
            "$('window').ready(function() {",
            "",
            "});"
        ],
        "description": "Ajax Window"
    },
    "AjaxAppend": {
        "prefix": [
            "ajax-append",
            "javascript-append",
            "js-append"
        ],
        "body": [
            ".append($('<>').addClass('')",
            ")"
        ],
        "description": "Ajax Window"
    },
    "AjaxClass": {
        "prefix": [
            "ajax-class-template",
            "javascript-class-template",
            "js-class-template"
        ],
        "body": [
            "var ClassName = function() {",
            "    this.init = init;",
            "",
            "    function init() {",
            "        console.log('Class Started');",
            "    }",
            "}",
            "",
            "var className;",
            "$('window').ready(function() {",
            "    className = new ClassName();",
            "    className.init();",
            "});"
        ],
        "description": "Ajax Window"
    },
    "AjaxSelectedCombo": {
        "prefix": [
            "ajax-selected-combo",
            "js-selected-combo",
            "cake-selected-combo"
        ],
        "body": [
            "let id = \\$('#SELECT_ID :selected').val(),",
            "    label = \\$('#SELECT_ID :selected').text();"
        ],
        "description": "Ajax Selected Combo"
    },
    "NodeClass": {
        "prefix": [
            "node-class",
            "node-class-model"
        ],
        "body": [
            "const config = require('./config/config');",
            "",
            "function CLASSNAME() {",
            "    mongoClient.connect(config.mongo.connectionString, function (err, db) {",
            "        if (err) throw err;",
            "        mongodb = db.db(\"chassi\");",
            "    });",
            "    classVarName = 'Class Variable';",
            "}",
            "",
            "CLASSNAME.prototype = {",
            "    start: function(req, res, callback) {",
            "        console.log(classVarName);",
            "        return res.json({status: \"success\"});",
            "    }",
            "}",
            "",
            "module.exports = new CLASSNAME();",
            "",
            "// Another Way",
            "'use strict';",
            "const config = require('./config/config');",
            "",
            "function FIRSTFUNCTION(param) {",
            "    console.log(param);",
            "}",
            "",
            "module.exports = {",
            "    FIRSTFUNCTION: FIRSTFUNCTION",
            "}",
            ""
        ],
        "description": "Node Class"
    },
    "NodePgPromisse": {
        "prefix": [
            "node-pg-promisse"
        ],
        "body": [
            "const query = {",
            "    name: 'set_unique_name',",
            "    text: \" SELECT \" +",
            "          \"   FROM users \" +",
            "          \"  WHERE name like $1 \" +",
            "          \"     OR email like $2 \" +",
            "          \" OFFSET 1 \" +",
            "          \"  LIMIT 1 \",",
            "    values: [`%\\${name}%`, `%\\${email}%`]",
            "}",
            "db.query(query)",
            "    .then(data => { console.log(data.rows); })",
            "    .catch(err => { console.log(err); });"
        ],
        "description": "Node Pg Promisse"
    },
    "NodePgCallback": {
        "prefix": [
            "node-pg-callback"
        ],
        "body": [
            "const query = {",
            "    name: 'set_unique_name',",
            "    text: \" SELECT * \" +",
            "          \"   FROM users \" +",
            "          \"  WHERE name like $1 \" +",
            "          \"     OR email like $2 \" +",
            "          \" OFFSET 1 \" +",
            "          \"  LIMIT 1 \",",
            "    values: [`%\\${name}%`, `%\\${email}%`],",
            "    rowMode: 'array',",
            "}",
            "db.query(query, (err, res) => {",
            "    if (err) {",
            "        console.log(err.stack);",
            "    } else {",
            "        callback(res.rows);",
            "    }",
            "});"
        ],
        "description": "Node Pg Callback"
    },
    "AjaxModal": {
        "prefix": [
            "ajax-modal"
        ],
        "body": [
            "$('#MODALID').modal('show');",
            "$('#MODALID').modal('hide');"
        ],
        "description": "Ajax Modal"
    },
    "AjaxCreateDateTime": {
        "prefix": [
            "ajax-create-datetime"
        ],
        "body": [
            "moment(new Date()).format('DD/MM/YYYY HH:mm:ss')",
            "moment(new Date(1678706562019)).format('DD/MM/YYYY HH:mm:ss')"
        ],
        "description": "Ajax Create Date Time"
    },
    "AjaxMomentDateTime": {
        "prefix": [
            "ajax-moment-datetime-examples"
        ],
        "body": [
            "// Date Create",
            "moment(new Date()).format('DD/MM/YYYY HH:mm:ss')",
            "moment(new Date(1678706562019)).format('DD/MM/YYYY HH:mm:ss')",
            "",
            "// Format Dates",
            "moment().format('MMMM Do YYYY, h:mm:ss a'); // February 8th 2023, 9:06:40 am",
            "moment().format('DD/MM/YYYY hh:mm:ss ');    // 01/02/2023 14:00:10",
            "moment().format('dddd [escaped]');          // Wednesday escaped",
            "moment().format();                          // 2023-02-08T09:13:20-03:00",
            "",
            "// Relative Time",
            "moment('20111031', 'YYYYMMDD').fromNow();  // 11 years ago",
            "moment().startOf('day').fromNow();         // 9 hours ago (day, hour, etc)",
            "moment().endOf('day').fromNow();           // in 15 hours",
            "",
            "// Calendar Time",
            "moment().calendar();                       // Today at 9:07 AM",
            "moment().subtract(10, 'days').calendar();  // 01/29/2023",
            "moment().add(1, 'days').calendar();        // Tomorrow at 9:07 AM"
        ],
        "description": "Ajax Moment Format Date Time Examples"
    },
    "AjaxArrayAppendPush": {
        "prefix": [
            "ajax-array-append-push"
        ],
        "body": [
            "let items = [];",
            "for (const child of children) {",
            "    items.push(child.id);",
            "}"
        ],
        "description": "Append items into array"
    },
    "AjaxArrayFor": {
        "prefix": [
            "ajax-array-for"
        ],
        "body": [
            "for (const child of children) {",
            "    console.log(child)",
            "}",
            "",
            "children.forEach(function(element, i) {",
            "    console.log(element)",
            "});"
        ],
        "description": "Ajax Format Date Time"
    },
    "AjaxStringReplace": {
        "prefix": [
            "ajax-string-replace"
        ],
        "body": [
            "yourText.replace('this', 'for this')"
        ],
        "description": "Ajax Format Date Time"
    },
    "NodePortPattern": {
        "prefix": [
            "node-port-pattern"
        ],
        "body": [
            "const port = process.env.PORT || config.port"
        ],
        "description": "Node Port Pattern"
    },
    "NodeToolClass": {
        "prefix": [
            "node-tools-template"
        ],
        "body": [
            "const hmh = require('hmh');",
            "",
            "function formatDate(date) {",
            "    const year = date.getFullYear();",
            "    const month = String(date.getMonth() + 1).padStart(2, '0');",
            "    const day = String(date.getDate()).padStart(2, '0');",
            "    return `\\${day}/\\${month}/\\${year}`;",
            "}",
            "",
            "module.exports = {",
            "    formatDate",
            "};"
        ],
        "description": "Node tools template"
    },
    "NodeClassDatabase": {
        "prefix": [
            "node-class-database"
        ],
        "body": [
            "const db = require('./pg_connection');",
            "",
            "class ChatDb {",
            "    constructor() { }",
            "",
            "    /**",
            "     * Busca um usuário pelo username",
            "     * @param {*} req request",
            "     * @param {*} callback função de callback",
            "     */",
            "    async find(req, callback) {",
            "        const username = req.params.username.trim();",
            "        try {",
            "            const { rows } = await db.query(`",
            "                SELECT *",
            "                FROM users u",
            "                WHERE u.name like $1",
            "            `, [username]);",
            "            callback(rows);",
            "        } catch (err) {",
            "            console.log(err);",
            "            callback({ error: 'SQL Error!!' });",
            "        }",
            "    }",
            "};",
            "",
            "module.exports = new ChatDb();"
        ],
        "description": "Node Database Class template"
    },
    "NodeClassController": {
        "prefix": [
            "node-exports"
        ],
        "body": [
            "module.exports = new Controller();",
            "module.exports = {",
            "    saveEvent,",
            "    saveSlot",
            "}"
        ],
        "description": "Node Exports Function template"
    },
    "JsWhenToDate": {
        "prefix": [
            "js-when-to-date",
            "ajax-when-to-date"
        ],
        "body": [
            "let time = 1678737927980,                       // 2023-03-13 20:05:27",
            "    nowtime = new Date().getTime(),             // 1679073784226",
            "    utc = new Date(time).toUTCString(),         // Mon, 13 Mar 2023 20:05:27 GMT",
            "    local = new Date(time).toLocaleString();    // 13/03/2023, 17:05:27",
            "// moment.js",
            "console.log(moment(time).utc().format('YYYY-MM-DD HH:mm:ss'));                  // 2023-03-13 20:05:27",
            "console.log(moment(nowtime).utcOffset('-03:00').format('YYYY-MM-DD HH:mm:ss')); // São Paulo: 2023-03-13 17:05:27"
        ],
        "description": "Javascript When (int) to Date"
    },
    "NodeUseStrict": {
        "prefix": [
            "node-use-strict"
        ],
        "body": [
            "'use strict';"
        ],
        "description": "Node use strict"
    },
    "NodeDateTimeUtil": {
        "prefix": [
            "node-date-time-util",
            "node-date-time-util-template"
        ],
        "body": [
            "'use strict';",
            "",
            "/**",
            " * Formata uma data para o formato desejado passado como parametro format",
            " *  sem a utilizacao de bibliotecas",
            " * @param {*} date = Date()",
            " * @param {*} format = utilize os caracteres 'dd mm yyyy HH MM SS'",
            " *  ex: 'dd/mm/yyyy HH:MM:SS', 'yyyy-mm-dd HH:MM:00', etc",
            " * @returns date formatada no padrao format",
            " */",
            "function formatDate(date, format) {",
            "    var day = date.getDate(),",
            "            month = date.getMonth() + 1,",
            "        year = date.getFullYear(),",
            "        hours = date.getHours(),",
            "        minutes = date.getMinutes(),",
            "        seconds = date.getSeconds(),",
            "        formDate = format;",
            "    formDate = formDate.replace('dd', day < 10 ? '0' + day : day);",
            "    formDate = formDate.replace('mm', month < 10 ? '0' + month : month);",
            "    formDate = formDate.replace('yyyy', year);",
            "    formDate = formDate.replace('HH', hours < 10 ? '0' + hours : hours);",
            "    formDate = formDate.replace('MM', minutes < 10 ? '0' + minutes : minutes);",
            "    formDate = formDate.replace('SS', seconds < 10 ? '0' + seconds : seconds);",
            "    return formDate;",
            "}",
            "",
            "// module exports",
            "module.exports = {",
            "    formatDate: formatDate",
            "};"
        ],
        "description": "Node Date Time Util"
    },
    "NodeStaticClass": {
        "prefix": "fmt",
        "body": [
            "'use strict';",
            "",
            "const config = require('../config/config');",
            "",
            "class MyClass {",
            "",
            "\tstatic counter = 9988;",
            "\tconstructor() {}",
            "",
            "\tstatic async _getString(mystring) {",
            "\t\treturn await mystring;",
            "\t}",
            "",
            "\tstatic async format(req, res) {",
            "\t\tlet teste = await MyClass._getString(MyClass.counter);",
            "\t\tlet aa = {",
            "\t\t\tmessage: teste,",
            "\t\t\tval1: MyClass.counter",
            "\t\t};",
            "",
            "\t\tMyClass.counter++;",
            "\t\taa['val2'] = MyClass.counter;",
            "\t\tres.json(aa);",
            "\t}",
            "}",
            "",
            "module.exports = MyClass;"
        ],
        "description": "Formats data and sends a JSON response"
    },
    "NodeJsonPropertiesFor": {
        "prefix": "node-json-properties-for",
        "body": [
            "let items = {name: 'jhon', age: 12, email: 'jhon@lenon.com'}",
            "for (let key in items) {",
            "\tif (items.hasOwnProperty(key)) {",
            "\t\tconst value = items[key];",
            "\t\tconsole.log(key, value);",
            "\t}",
            "}"
        ],
        "description": "Iterates over object properties and logs key-value pairs"
    },
    "NodeConvertJsonArrayToInValues": {
        "prefix": "node-convert-json-array-to-in-values",
        "body": [
            "convertJsonArrayToInValues(req) {",
            "\tconst keys = req.body;",
            "\tconst query = `SELECT * FROM table WHERE field IN (${keys.map((_, index) => `$${index + 1}`).join(',')})`;",
            "\treturn await executeQuery(query, keys);",
            "}"
        ],
        "description": "Converts a JSON array into an IN clause for a SQL query"
    },
    "JavascriptCakeUrl": {
        "prefix": [
            "javascript-cake-url",
            "js-cake-url"
        ],
        "body": [
            "let _url = '<?= Router::url(array(",
            "\t'plugin' => false,",
            "\t'admin' => true,",
            "\t'controller' => 'yourController',",
            "\t'action' => 'your_action',",
            "), false); ?>';"
        ],
        "description": "Generates a URL using Router::url with specific parameters"
    },
    "node-static-class": {
        "prefix": "node-static-class",
        "body": [
            "const config = require('../config');\n",
            "class MyClass {",
            "\tstatic async methodOne(param) {",
            "\t\tawait MyClass.methodTwo(param);",
            "\t}",
            "",
            "\tstatic async methodTwo(param) {",
            "\t\tconsole.log(param);",
            "\t}",
            "",
            "\tstatic _privateMethod() {",
            "\t\tconsole.log('To private use _methodName()');",
            "\t}",
            "}\n",
            "module.exports = MyClass;\n"
        ],
        "description": "Create a class with static methods in Node.js"
    },
    "dates-function": {
        "prefix": "node-dates-manipulations",
        "body": [
            "function dates() {",
            "\t// current date",
            "\tconst now = new Date(),",
            "",
            "\t// first hour of day",
            "\tfirstHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0),",
            "\tfirstHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0),",
            "",
            "\t// last hour of day",
            "\tlastHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59),",
            "\tlastHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 23, 59, 59),",
            "",
            "\t// format first hour of day",
            "\t// const moment = require('moment');",
            "\tformatted = moment(firstHourOfDay).format('YYYY-MM-DD HH:mm:ss'),",
            "",
            "\t// criando a data a partir de uma string",
            "\tdateString = '2023-07-07 14:45:10',",
            "\tformattedDateString = dateString.replace(' ', 'T'),",
            "\tdateObject = new Date(formattedDateString);",
            "}"
        ],
        "description": "Perform date operations"
    },
    "string-to-date": {
        "prefix": "node-string-to-date",
        "body": [
            "\t// criando a data a partir de uma string",
            "\tconst dateString = '2023-07-07 14:45:10',",
            "\tformattedDateString = dateString.replace(' ', 'T'),",
            "\tdateObject = new Date(formattedDateString);"
        ],
        "description": "Convert String to Date"
    },
    "first-last-dates": {
        "prefix": "node-fisrt-last-hours-of-day",
        "body": [
            "function dates() {",
            "\t// current date",
            "\tconst now = new Date(),",
            "",
            "\t// first hour of day",
            "\tfirstHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0),",
            "\tfirstHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0),",
            "",
            "\t// last hour of day",
            "\tlastHourOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59),",
            "\tlastHourUTCOfDay = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 23, 59, 59);"
        ],
        "description": "Node Fisrt and Last Hours of Day"
    },
    "dates-format": {
        "prefix": "node-format-date",
        "body": [
            "\t// format date using moment.js",
            "\t// const moment = require('moment');",
            "\tconst formatted = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');"
        ],
        "description": "Perform date operations"
    },
    "iterate-json-object": {
        "prefix": [
            "js-for-json-object",
            "ajax-for-json-object",
            "javascript-for-json-object"
        ],
        "body": [
            "let json = JSON.parse(data);",
            "for (let key in json) {",
            "\tif (json.hasOwnProperty(key)) {",
            "\t\tlet value = json[key];",
            "\t\tconsole.log(`Chave: ${key}, Valor: ${value}`);",
            "\t}",
            "}"
        ],
        "description": "Iterate over the properties of a JSON object and log key-value pairs"
    },
    "js-switch-statement": {
        "prefix": [
            "js-case-switch",
            "javascript-case-switch"
        ],
        "body": [
            "let param = 'term1';",
            "switch (param) {",
            "\tcase 'term1':",
            "\t\tconsole.log('Term 1');",
            "\t\tbreak;",
            "\t",
            "\tdefault:",
            "\t\tconsole.log('Default');",
            "\t\tbreak;",
            "}"
        ],
        "description": "Switch statement example"
    },
    "RouterURLs": {
        "prefix": [
            "js-router-urls",
            "js-cake-router"
        ],
        "body": [
            "// basic router, true with http",
            "<?= Router::url('/', true) ?>",
            "",
            "// class router, false without http",
            "<?= Router::url(array(",
            "\t'plugin' => false,",
            "\t'admin' => true,",
            "\t'controller' => 'domni_contacts',",
            "\t'action' => 'close_open_contacts',",
            "), false); ?>"
        ],
        "description": "Router URLs with different options"
    },
    "LocalStorageCompleteExample": {
        "prefix": "js-storage-complete-example",
        "body": [
            "// Armazenar um valor no LocalStorage",
            "localStorage.setItem('nome', 'João');",
            "localStorage.setItem('idade', '30');",
            "localStorage.setItem('cidade', 'São Paulo');",
            "",
            "// Recuperar o valor do LocalStorage",
            "const nome = localStorage.getItem('nome');",
            "console.log('Nome:', nome); // Saída: \"Nome: João\"",
            "",
            "const idade = localStorage.getItem('idade');",
            "console.log('Idade:', idade); // Saída: \"Idade: 30\"",
            "",
            "// Remover um item do LocalStorage",
            "localStorage.removeItem('cidade');",
            "",
            "// Recuperar o valor do item removido (deve ser null)",
            "const cidadeRemovida = localStorage.getItem('cidade');",
            "console.log('Cidade Removida:', cidadeRemovida); // Saída: \"Cidade Removida: null\"",
            "",
            "// Limpar todo o LocalStorage",
            "localStorage.clear();",
            "",
            "// Verificar o número de itens armazenados (deve ser 0 após o clear)",
            "const numItens = localStorage.length;",
            "console.log('Número de Itens:', numItens); // Saída: \"Número de Itens: 0\"",
            "",
            "// Armazenar mais valores no LocalStorage",
            "localStorage.setItem('profissao', 'Engenheiro');",
            "localStorage.setItem('email', 'joao@example.com');",
            "",
            "// Recuperar o valor de um item através do índice (chave no índice 1)",
            "const chaveNoIndice1 = localStorage.key(1);",
            "console.log('Chave no Índice 1:', chaveNoIndice1); // Saída: \"Chave no Índice 1: email\""
        ],
        "description": "Exemplo de uso de SET do localStorage"
    },
    "LocalStorageSetExample": {
        "prefix": "js-storage-set",
        "body": [
            "// Armazenar um valor no SessionStorage",
            "localStorage.setItem('paginaAtiva', 'paginaPrincipal');"
        ],
        "description": "Exemplo de uso de SET do localStorage"
    },
    "LocalStorageGetExample": {
        "prefix": "js-storage-get",
        "body": [
            "// Recuperar o valor do SessionStorage",
            "const paginaAtiva = localStorage.getItem('paginaAtiva');"
        ],
        "description": "Exemplo de uso de GET do localStorage"
    },
    "LocalStorageDeleteClearExample": {
        "prefix": [
            "js-storage-delete",
            "js-storage-clear",
            "js-storage-remove-item"
        ],
        "body": [
            "// Remover um item do SessionStorage",
            "sessionStorage.removeItem('cidade');",
            "",
            "// Limpar todo o SessionStorage",
            "sessionStorage.clear();"
        ],
        "description": "Exemplo de uso de GET do localStorage"
    }
}