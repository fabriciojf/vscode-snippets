{
    "StyleImport": {
        "prefix": [
            "r-style",
            "r-sass"
        ],
        "body": [
            "import styles from '../styles/COMPONENT.module.sass';",
            "// className={styles.headerLabel}"
        ],
        "description": "Importando Style dentro do React"
    },
    "PropTypesImport": {
        "prefix": [
            "r-proptypes"
        ],
        "body": [
            "import PropTypes from 'prop-types';",
            "// CLASSNAME.propTypes = {",
            "//     contact: PropTypes.object",
            "// };"
        ],
        "description": "Importando Style dentro do React"
    },
    "arrayToIdLabel": {
        "prefix": [
            "r-array-to-id-label"
        ],
        "body": [
            "const options=['option1', 'option2']",
            "setNewOptions(Array.from(options).map(item => ({",
            "   id: item,",
            "   label: item",
            "})));"
        ],
        "description": "Importando Style dentro do React"
    },
    "PathsContext": {
        "prefix": [
            "r-context-paths"
        ],
        "body": [
            "import { usePaths } from '../../contexts/PathsContext';",
            "const { persistenceHost, cadastrosHost, webchatUrl, emailHost, storageHost } = usePaths();"
        ],
        "description": "Paths Context"
    },
    "Includes": {
        "prefix": [
            "r-contains",
            "r-includes"
        ],
        "body": [
            "import { usePaths } from '../../contexts/PathsContext';",
            "const { persistenceHost, cadastrosHost, webchatUrl, emailHost, storageHost } = usePaths();"
        ],
        "description": "Paths Context"
    },
    "SnackbarContext": {
        "prefix": [
            "r-context-snackbar",
            "r-notify-context-snackbar",
            "r-alert-context-snackbar"
        ],
        "body": [
            "import { useSnackbar } from 'mui-snackbar-utils';",
            "const { setSnackbar } = useSnackbar();"
        ],
        "description": "Snackbar Dani Context"
    },
    "DomniContext": {
        "prefix": [
            "r-context-domni"
        ],
        "body": [
            "import { useDomni } from '../../contexts/DomniContext';",
            "const {",
            "\tcontactClosed,",
            "\tkillContact,",
            "\tsetContactClosed,",
            "\tclosed,",
            "\tsetClosed,",
            "\tnewContact,",
            "\tsetNewContact,",
            "\tnewMessage,",
            "\tsetNewMessage,",
            "\tnewNote,",
            "\tsetNewNote,",
            "\tcreate,",
            "\tconnect,",
            "\tdisconnect,",
            "\tregisterJoin,",
            "\tinputText,",
            "\tsetInputText,",
            "\tsendMessage,",
            "\ttransferred,",
            "\ttransferContact,",
            "\tnewIncomingMessage,",
            "\tinactiveAllContactsByAgentId,",
            "\tinactiveContactByCid,",
            "\t// Assistentes",
            "\tstartAssistant,",
            "\tstopAssistant,",
            "\tactiveAssistants,",
            "\tsendToCopilot,",
            "\t// Notificação de nova mensagem",
            "\tnotifyNewMessage,",
            "\t// Apresenta o dialogBox",
            "\tshowDialogBox, setShowDialogBox,",
            "} = useDomni();"
        ],
        "description": "Domni Context"
    },
    "ActionContext": {
        "prefix": [
            "r-context-action"
        ],
        "body": [
            "import { useActionBoxes } from '../../contexts/ActionContext';",
            "const {",
            "\tshowingDialog, showDialog,",
            "\tshowingTabulation, showTabulation,",
            "\tshowingEmojis, showEmojis,",
            "\tshowingTemplateMessages, showTemplateMessages,",
            "\tshowingTransfer, showTransfer,",
            "\tshowingHelp, showHelp,",
            "\tshowingAttaches, showAttaches,",
            "\tresetWindow",
            "} = useActionBoxes();"
        ],
        "description": "Action Context"
    },
    "PermissionProfileContext": {
        "prefix": [
            "r-context-permission-profile"
        ],
        "body": [
            "import { usePermissions } from '../../contexts/PermissionsProfileContext';",
            "/**",
            " * activeUser = {",
            " *    name: 'Fabricio',",
            " *    email: 'fabriciojf@gmail.com',",
            " *    id: 'fabricio-user',",
            " *    success: true",
            " * }",
            " */",
            "const { configurations, modules, read, activeUser } = usePermissions();"
        ],
        "description": "Permission Profiles Context"
    },
    "InputChatContext": {
        "prefix": [
            "r-context-input-chat"
        ],
        "body": [
            "import { useInputChat } from '../../contexts/InputChatContext';",
            "const { showingDialog, setShowingDialog } = useInputChat();"
        ],
        "description": "Input Chat Context"
    },
    "ClientContext": {
        "prefix": [
            "r-context-client"
        ],
        "body": [
            "import { useClient } from '../../contexts/ClientContext';",
            "const { client, getClient } = useClient();"
        ],
        "description": "Client Context"
    },
    "ContactContext": {
        "prefix": [
            "r-context-contact"
        ],
        "body": [
            "import { useContact } from '../../contexts/ContactContext';",
            "const {",
            "\tcontact, setContact, updateContact, getContact,",
            "\topenContacts, getOpenContacts,",
            "\tincomingDialog, setIncomingDialog,",
            "\temail, setEmail, refreshEmail, getEmail,",
            "\tsetClient,",
            "\teventRefresh, dispatchEventRefresh,",
            "} = useContact();"
        ],
        "description": "Contact Context"
    },
    "AgentEventsContext": {
        "prefix": [
            "r-context-agent-event"
        ],
        "body": [
            "import { useAgentEvents } from '../../contexts/AgentEventsContext';",
            "const { changeAction, Status } = useAgentEvents();"
        ],
        "description": "Agent Event Context"
    },
    "UseLocation": {
        "prefix": [
            "r-use-location",
            "r-navigate-to-route"
        ],
        "body": [
            "import { useLocation } from \"omni-router\";",
            "const [, navigateToRoute] = useLocation();"
        ],
        "description": "Agent Event Context"
    },
    "Moment": {
        "prefix": [
            "r-moment-import",
            "r-date-timestamp-moment-import"
        ],
        "body": [
            "import moment from 'moment';",
            "const formattedDate = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');"
        ],
        "description": "Moment"
    },
    "Compare": {
        "prefix": [
            "r-compare-objects",
            "r-compare-with-lodash"
        ],
        "body": [
            "import _ from 'lodash';",
            "if (!_.isEqual(prevNewMessage.current, newMessage) && newMessage) {...}"
        ],
        "description": "Moment"
    },
    "foreachMap": {
        "prefix": [
            "r-map",
            "r-foreach"
        ],
        "body": [
            "dialog.forEach((wdialog, index) => {}",
            "dialog.map((wdialog, index) => {}"
        ],
        "description": "Moment"
    },
    "importViewport": {
        "prefix": [
            "r-viewport-import"
        ],
        "body": [
            "import Viewport from 'layout/Viewport';"
        ],
        "description": "Import Viewport"
    },
    "useCallback": {
        "prefix": [
            "r-usecallback"
        ],
        "body": [
            "const fethData = useCallback(() => {",
            "   ...",
            "}, []);"
        ],
        "description": "useCallback"
    },
    "buttonMui": {
        "prefix": [
            "r-button-mui",
            "mui-button"
        ],
        "body": [
            "<Button",
            "    variant=\"contained text outlined filled elevated\"",
            "    disabled",
            "    href=\"#text-buttons\"",
            "    disableElevation",
            "    color=\"primary secondary success error\"",
            "    size=\"small medium large\"",
            "    startIcon={<DeleteIcon />}",
            "    endIcon={<SendIcon />}",
            "    ",
            ">{label}</Button>",
            "<IconButton",
            "    aria-label=\"delete\"",
            "    color=\"primary secondary success error\"",
            "    size=\"small medium large\"",
            "    disabled ",
            "   <DeleteIcon />",
            "</IconButton>"
        ],
        "description": "useCallback"
    },
    "buttonGroupMui": {
        "prefix": [
            "r-buttongroup-mui",
            "mui-buttongroup"
        ],
        "body": [
            "<ButtonGroup",
            "    orientation=\"horizontal vertical\"",
            "    variant=\"contained text outlined filled elevated\"",
            "    size=\"small medium large\"",
            ">",
            " {buttons}",
            "</ButtonGroup>"
        ],
        "description": "reactbuttons"
    },
    "axios": {
        "prefix": [
            "r-axios"
        ],
        "body": [
            "axios.put(`\\${persistenceHost}/clients/\\${id}`, {})",
            "\t.then(response => { ... })",
            "\t.catch(error => { ... });\n",
            "const response = await axios.post(url, jsonObject, {",
            "\theaders: {",
            "\t\t'Content-Type': 'application/json',",
            "\t\t'x-access-token': ${token}",
            "\t},",
            "\ttimeout: 60000",
            "});"
        ],
        "description": "axios"
    },
    "paper": {
        "prefix": [
            "r-paper"
        ],
        "body": [
            "<Paper elevation={6} sx={{ padding: '15px' }}>"
        ],
        "description": "paper"
    },
    "icons": {
        "prefix": [
            "r-icon"
        ],
        "body": [
            "<SelectedIcon fontSize={24} sx={{ mr: 1 }} />"
        ],
        "description": "Icons"
    },
    "iconsImport": {
        "prefix": [
            "r-icon-import"
        ],
        "body": [
            "import SubtitlesOutlinedIcon from '@mui/icons-material/SubtitlesOutlined';"
        ],
        "description": "Icons Import"
    },
    "cloneObject": {
        "prefix": [
            "r-clone-object"
        ],
        "body": [
            "const [issue, setIssue] = useState({});",
            "var newIssue = {...issue};",
            "newIssue['123'] = '123'"
        ],
        "description": "Clone Object"
    },
    "displayFlex": {
        "prefix": [
            "r-display-flex"
        ],
        "body": [
            "<Box sx={{ width: '100%', display: 'flex', justifyContent: 'start/center/end/space-between/space-around/', alignItems: 'center' }} />"
        ],
        "description": "Clone Object"
    },
    "autocomplete": {
        "prefix": [
            "r-autocomplete"
        ],
        "body": [
            "<Autocomplete",
            "\tid=\"ID\"",
            "\toptions={OPTIONS}",
            "\tvalue={OPTION}",
            "\tgetOptionLabel={(option) => option}",
            "\tgetOptionLabel={(option) => {",
            "\t\tif (Array.isArray(option)) {",
            "\t\t\treturn option[0]?.name || '';",
            "\t\t} else {",
            "\t\t\treturn option?.name || '';",
            "\t\t}",
            "\t}}",
            "\t//isOptionEqualToValue={(option, value) => option.value === value.value}",
            "\tisOptionEqualToValue={(option, value) => option === value}",
            "\tmultiple",
            "\tdisableClearable={false}",
            "\tdefaultValue={[]}",
            "\tonChange={(event, newValue) => {",
            "\t\tsetOPTION(newValue);",
            "\t}}",
            "\trenderInput={(params) => (",
            "\t\t<TextField",
            "\t\t\t{...params}",
            "\t\t\tvariant=\"standard\"",
            "\t\t\tlabel=\"LABEL\"",
            "\t\t/>",
            "\t)}",
            "/>"
        ]
    },
    "useEffect": {
        "prefix": [
            "r-useeffect"
        ],
        "body": [
            "useEffect(() => {",
            "    ${0}",
            "}, []);"
        ],
        "description": "UseEffect"
    },
    "textField": {
        "prefix": [
            "r-text-field"
        ],
        "body": [
            "const textFieldHandler = (event) => {",
            "   setTextMessage(event.target.value);",
            "}",
            "",
            "<TextField",
            "  fullWidth",
            "  multiline",
            "  rows={2}",
            "  margin=\"normal\"",
            "  label={`Digite sua mensagem ao Assistente`}",
            "  onChange={(e) => setValue(e.target.value)}",
            "  value={textMessage}",
            "  variant=\"outlined\"",
            "  size=\"small\"",
            "  disabled={!contact.active}",
            "/>"
        ],
        "description": "Text Field"
    },
    "promisseAll": {
        "prefix": [
            "r-promisse-all"
        ],
        "body": [
            "const [",
            "    automatedServices,",
            "    clients,",
            "] = await Promise.all([",
            "    getContents('automated-services'),",
            "    axios.get(`\\${persistenceHost}/clients/\\${id}`)",
            "]);",
            "",
            "await Promise.all([",
            "    getContents('automated-services'),",
            "    axios.get(`\\${persistenceHost}/clients/\\${id}`)",
            "])",
            ".then(([response1, response2]) => {",
            "    console.log('response1:', response1.data);",
            "    console.log('response2:', response2.data);",
            "}).catch(error => {",
            "    console.error('Erro ao buscar dados da API:', error);",
            "});"
        ],
        "description": "Promisse All"
    },
    "MongoRegex": {
        "prefix": [
            "r-mongo-regex",
            "r-mongo-find"
        ],
        "body": [
            "const searchTerm = 'fabricio';",
            "const regex = new RegExp(`.*${searchTerm}.*`, 'i');",
            "const match = {",
            "\t$expr: {",
            "\t\t$and: [",
            "\t\t\t{ $regexMatch: { input: $tags.who', regex: /fabricio/i } }",
            "\t\t\t{ $regexMatch: { input: $tags.who', regex: regex } }",
            "\t\t\t{ $eq: [ { $toLower: '$tags.who' }, 'fabricio' ] },",
            "\t\t\t{ $eq: ['$tags.who', 'Fabricio'] }",
            "\t\t]",
            "\t}",
            "};"
        ],
        "description": "Importando Style dentro do React"
    },
    "ForObject": {
        "prefix": [
            "r-for-object-attributes",
            "r-foreach-object-attributes",
            "r-loop-object-attributes"
        ],
        "body": [
            "const objeto = {",
            "   'action': 'stop',",
            "   'media': 'voice',",
            "};",
            "for (let chave in objeto) {",
            "   console.log(chave, ':', objeto[chave]);",
            "}"
        ],
        "description": "Client Context"
    },
    "RandomCode": {
        "prefix": [
            "r-random-code"
        ],
        "body": [
            "function randomCode() {",
            "\tconst caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
            "\tlet codigo = '';",
            "\tfor (let i = 0; i < 8; i++) { // Tamanho do código: 8 caracteres",
            "\t\tcodigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));",
            "\t}",
            "\treturn codigo;",
            "}"
        ],
        "description": "Random Code"
    },
    "TextField": {
        "prefix": [
            "r-input-text",
            "r-text-field"
        ],
        "body": [
            "<TextField",
            "\tid=\"name\"",
            "\tlabel=\"Nome\"",
            "\tvariant=\"standard\" // standard, outlined, filled",
            "\tfullWidth",
            "\tsize=\"small\" // small, medium, large",
            "\tonChange={(e) => setName(e.target.value)}",
            "/>"
        ],
        "description": "Text Field"
    },
    "Tooltip": {
        "prefix": [
            "r-tooltip",
            "r-tip-alt",
            "r-dica"
        ],
        "body": [
            "<Tooltip title=\"descricao\">",
            "\t<Typography variant='h4' sx={{ mb: 1 }}>DNK Video Chamadas</Typography>",
            "<Tooltip/>"
        ],
        "description": "tooltip"
    },
    "dataGrid": {
        "prefix": [
            "r-datagrid",
            "r-grid"
        ],
        "body": [
            "const [rows, setRows] = useState([]);",
            "const [page, setPage] = useState(1);",
            "const [pageSize, setPageSize] = useState(5);",
            "const [totalRows, setTotalRows] = useState(0);",
            "const [loading, setLoading] = useState(false);",
            "const paginationModel = {",
            "\tpage,",
            "\tpageSize,",
            "\tpageCount: Math.ceil(totalRows / pageSize),",
            "\ttotalCount: totalRows,",
            "};",
            "const columns = [",
            "\t{",
            "\t\tfield: 'name', headerName: 'Nome', width: 250,",
            "\t\trenderCell: (params) => (",
            "\t\t\t<div>",
            "\t\t\t\t<Button",
            "\t\t\t\t\tstartIcon={<EditIcon />}",
            "\t\t\t\t\tonClick={() => handleEditClick(params.row.id)}",
            "\t\t\t\t>",
            "\t\t\t\t{params.row.name}",
            "\t\t\t\t</Button>",
            "\t\t\t</div>",
            "\t\t),",
            "\t},",
            "\t{",
            "\t\tfield: 'media', headerName: 'Midia', width: 150, renderCell: (params) => {",
            "\t\t\treturn <Typography variant='body2'>{params?.row.data?.media}</Typography>;",
            "\t\t}",
            "\t}",
            "\t{ field: 'cid', headerName: 'CID', width: 150 },",
            "\t{",
            "\t\t// import dayjs from 'dayjs';",
            "\t\tfield: 'createdAt', headerName: 'Criado em', width: 180, renderCell: (params) => {",
            "\t\t\tconst date = new Date(params.value);",
            "\t\t\treturn `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;",
            "\t\t}",
            "\t},",
            "];",
            "",
            "<DataGrid",
            "\tsx={{ marginTop: '15px' }}",
            "\trows={rows}",
            "\tcolumns={columns}",
            "\trowCount={totalRows}",
            "\tpagination",
            "\tpaginationMode='server'",
            "\tpaginationModel={paginationModel}",
            "\tonPaginationModelChange={({ page, pageSize }) => {",
            "\t\tsetPage(page);",
            "\t\tsetPageSize(pageSize);",
            "\t\tfetchRowsFromDatabase(page);",
            "\t}}",
            "\tloading={loading}",
            "\tpageSizeOptions={[5, 10, 50]}",
            "\tgetRowId={(row) => row._id}",
            "\tautoSizeColumnsMode='fill'",
            "\tdisableColumnResize",
            "/>"
        ],
        "description": "tooltip"
    },
    "MergeObject": {
        "prefix": [
            "r-merge-object",
            "r-merge-array",
            "r-add-object",
            "r-add-array"
        ],
        "body": [
            "// object",
            "var data = { messages: {} };",
            "items.forEach(element => {",
            "\tdata.messages = {...data.messages, [element.id]: element.messages};",
            "});",
            "// array",
            "var data = { messages: [] };",
            "items.forEach(element => {",
            "\tdata.messages = [...data.messages, {[element.id]: element.messages}];",
            "});",
        ],
        "description": "Merge de Objeto e Array"
    },
    "Tooltip": {
        "prefix": [
            "r-object-custom-key",
            "r-attribute-custom-key",
            "r-atributo-custom-key"
        ],
        "body": [
            "// Custom attribute",
            "data = {[attribute.name]: attribute.value}",
        ],
        "description": "Atributo Customizado"
    },
    "usePermissions": {
        "prefix": [
            "r-use-permissions-provider",
            "r-permissions-provider"
        ],
        "body": [
            "import { usePermissions } from \"permissions-provider-lib\";",
            "const {",
            "\tactiveUser,",
            "\tuserConfigurations,",
            "\tpublicDomainData,",
            "} = usePermissions();"
        ],
        "description": "Use Permissions"
    },
    "usePermissionsObjects": {
        "prefix": [
            "r-use-permissions-data",
            "r-permissions-data"
        ],
        "body": [
            "const resources = {",
            "\tconfigurations: {},",
            "\tskills: [],",
            "\tdashboards: {},",
            "\tcampaigns: {},",
            "\tmodules: {},",
            "\tproducts: {},",
            "\tserviceFilters: {},",
            "\turas: {},",
            "\tuserGroups: {},",
            "\tstringList: {",
            "\t\tcampaigns: '',",
            "\t\tmodules: '',",
            "\t\tproducts: '',",
            "\t\tserviceFilters: '',",
            "\t\turas: '',",
            "\t\tuserGroups: '',",
            "\t},",
            "\tservices: {",
            "\t\tavailable: [],",
            "\t\tmedias: [],",
            "\t\tticketCategories: [],",
            "\t\tticketPriorities: [],",
            "\t\tticketStatus: [],",
            "\t},",
            "};",
        ],
        "description": "Use Permissions Data"
    },
    "usePermissionsComponents": {
        "prefix": [
            "r-use-permissions-components",
            "r-permissions-components"
        ],
        "body": [
            "import {",
            "\tCallStatusSelect,",
            "\tCampaignCategorySelect,",
            "\tCampaignSelect,",
            "\tChannelSelect,",
            "\tCustomSelect,",
            "\tDateFilter,",
            "\tDateSelect,",
            "\tDateTimeSelect,",
            "\tMediaSelect,",
            "\tNumberInput,",
            "\tServiceSelect,",
            "\tTextInput,",
            "\tTimeSelect,",
            "\tUserGroupSelect,",
            "} from 'permissions-components-lib';",
        ],
        "description": "Use Permissions Components"
    },
    "ServiceSelect": {
        "prefix": [
            "r-service-select",
        ],
        "body": [
            "// import { ServiceSelect } from 'permissions-components-lib';",
            "// const isDebug = import.meta.env.VITE_DEBUG === 'true'; // .env: VITE_DEBUG=true",
            "// const [service, setService] = useState([]); // deve ser []",
            "// const service: service[1] || userConfigurations?.stringList?.serviceFilters || '';",
            "<ServiceSelect",
            "\tvalue={service}",
            "\tonChange={setService}",
            "\tuserConfigurations={userConfigurations}",
            "\tdebug={isDebug}",
            "\toptionsKey={['filas']}",
            "/>"
        ],
        "description": "Permissions Component Lib"
    },
    "BucketSelect": {
        "prefix": [
            "r-bucket-select"
        ],
        "body": [
            "// import { BucketSelect } from 'permissions-components-lib';",
            "const [bucket, setBucket] = useState({});",
            "// bucket = {",
            "//   startDate, // data inicial selecionada no filtro",
            "//   endDate,   // data final selecionada no filrtro",
            "//   timeUnit,  // unidade de tempo selecionada (dia, mês, ano), utilizado para definir o tipo de gráfico",
            "//   interval,  // intervalo de tempo selecionado (15, 30, 60 minutos)",
            "// }",
            "<BucketSelect onChange={setBucket} />"
        ],
        "description": "Permissions Component Lib Bucket Select"
    },

    "FiltersContainer": {
        "prefix": [
            "r-filters-container",
            "r-filters-box"
        ],
        "body": [
            "// import { FiltersContainer } from 'permissions-components-lib';",
            "const [expandCollapse, setExpandCollapse] = useState(true);",
            "<FiltersContainer",
            "\ttitle={`Relatório Tempo Médio`}",
            "\texpandCollapse={expandCollapse}",
            "\tsetExpandCollapse={setExpandCollapse}",
            "\tclickHandler={YOUR_ACTION} // click filter button",
            ">",
            "\t// ... childs",
            "</FiltersContainer>"
        ],
        "description": "Permissions Component Filters Container"
    },
    "UserGroupSelect": {
        "prefix": [
            "r-user-group-select",
        ],
        "body": [
            "// import { UserGroupSelect } from 'permissions-components-lib';",
            "// const [userGroup, setUserGroup] = useState([]); // deve ser []",
            "// const agents: userGroup[1] || userConfigurations?.stringList?.userGroups || ''",
            "<UserGroupSelect",
            "\tvalue={agent}",
            "\tonChange={setUserGroup}",
            "\tuserConfigurations={userConfigurations}",
            "/>"
        ],
        "description": "Permissions Component Lib"
    },
    "CallStatus": {
        "prefix": [
            "r-call-status",
            "r-media",
            "r-channel",
        ],
        "body": [
            "// import { ChannelSelect, MediaSelect, CallStatusSelect } from 'permissions-components-lib';",
            "// const [status, setStatus] = useState({}); // deve ser {}",
            "// const media: media?.id || '-';",
            "// ...",
            "// <ChannelSelect /> <MediaSelect />",
            "<CallStatusSelect ",
            "\tvalue={status}",
            "\tonChange={setStatus}",
            "\tpublicDomainData={publicDomainData}",
            "/>"
        ],
        "description": "Permissions Component Lib"
    },
    "TextInput": {
        "prefix": [
            "r-text-input"
        ],
        "body": [
            "// import { TextInput } from 'permissions-components-lib';",
            "// const [cid, setCid] = useState(''); // deve ser '' ",
            "// const cid: cid || '';",
            "// ...",
            "<TextInput ",
            "\tid=\"cid\"",
            "\tlabel=\"CID\"",
            "\tonChange={setCid}",
            "\tvalue={cid}",
            "/>"
        ],
        "description": "Permissions Component Lib"
    },
    "DotEnv": {
        "prefix": [
            "r-dov-env",
            "r-.-env"
        ],
        "body": [
            "// Arquivo .env:",
            "VITE_DEBUG=true",
            "// const isDebug = import.meta.env.VITE_DEBUG === 'true';",
            "OU vite.config.js:",
            "export default defineConfig({",
            "\t...",
            "\tdefine: {",
            "\t\t'process.env': {",
            "\t\t\tAPP_VERSION: JSON.stringify('1.1.0'),",
            "\t\t\tVITE_DEBUG: true,",
            "\t\t},",
            "\t},",
            "\t...",
            "// const isDebug = process.env.VITE_DEBUG === 'true';",
        ],
        "description": "DotEnv"
    },
    "isDebug": {
        "prefix": [
            "r-is-debug"
        ],
        "body": [
            "// vite.config.js",
            "define: {",
            "\t__IS_DEBUG__: JSON.stringify(true),",
            "},",
            "const isDebug = __IS_DEBUG__;"
        ],
        "description": "isDebug"
    },
    "viewPort": {
        "prefix": [
            "r-viewport"
        ],
        "body": [
            "// import { Viewport } from \"omni-layout\";",
            "// import { Route, Router, Switch } from \"omni-router\";",
            "// import { MyThemeProvider } from '../../Preview';",
            "<MyThemeProvider>",
            "\t<Router base=\"/report-tabulation\">",
            "\t\t<Viewport",
            "\t\t\tsx={{",
            "\t\t\t\theight: '100vh',",
            "\t\t\t\toverflow: 'auto',",
            "\t\t\t\tmarginTop: '0 !important',  // usado nos relatorios para posicionar mais acima",
            "\t\t\t\tpaddingTop: '0 !important', // usado nos relatorios para posicionar mais acima",
            "\t\t\t}} >",
            "\t\t\t<Switch>",
            "\t\t\t\t<Route path=\"/:any*\">",
            "\t\t\t\t\t<TabulationReport />",
            "\t\t\t\t</Route>",
            "\t\t\t</Switch>",
            "\t\t</Viewport>",
            "\t</Router>",
            "</MyThemeProvider >",
        ],
        "description": "ViewReport"
    },
    "headerlayout": {
        "prefix": [
            "r-header-layout"
        ],
        "body": [
            "<HeaderLayout>",
            "\t<Breadcrumbs sx={{ flexGrow: 1 }} />",
            "\t<ThemeToggle />",
            "\t<IconButton color=\"inherit\" onClick={handleSnackbar",
            "\t}>",
            "\t\t<HelpIcon />",
            "\t</IconButton>",
            "</HeaderLayout>",
        ],
        "description": "Header Layout"
    },
    "griLayout": {
        "prefix": [
            "r-grid-layout"
        ],
        "body": [
            "<Grid container spacing={2}>",
            "\t<Grid item xs={4} lg={2}></Grid>",
            "\t<Grid item xs={4} lg={2}></Grid>",
            "</Grid>"
        ],
        "description": "Grid Layout"
    },
    "groupSelect": {
        "prefix": [
            "r-group-select"
        ],
        "body": [
            "const [uraList, setUraList] = useState([]);",
            "const [moduleList, setModuleList] = useState([]);",
            "const result = {",
            "  uras: uras[1] || userConfigurations?.stringList?.uras || '', // dados separados por virgulas (u1,u2,u3)",
            "  modules: modules[1] || userConfigurations?.stringList?.modules || '', // dados separados por virgulas (m1,m2,m3)",
            "}",
            "<Grid container spacing={2} sx={{ justifyContent: \"start\", alignItems: \"top\", padding: \"20px\" }}>",
            "\t<Grid item xs={4} lg={3}>",
            "\t\t<GroupSelect",
            "\t\t\tvalue={modules}",
            "\t\t\tonChange={setModules}",
            "\t\t\tlabel='ModuleList'",
            "\t\t\tlistOptions={userConfigurations?.modules}",
            "\t\t/>",
            "\t</Grid>",
            "</Grid>",
        ],
        "description": "Group Select"
    },
    "reportFiltersBox": {
        "prefix": [
            "r-report-filters-box"
        ],
        "body": [
            "<ReportFilterBox",
            "\ttitle={\"Filtros\"}",
            "\tsx={{",
            "\t\tmarginBottom: \"10px\",",
            "\t\tborder: \"1px solid #ddd\",",
            "\t\tborderBottom: \"0px\",",
            "\t}}",
            "\texpandCollapse={expandCollapse}",
            "\tsetExpandCollapse={setExpandCollapse}",
            ">",
            "\t<Grid container spacing={2} sx={{ justifyContent: \"start\", alignItems: \"top\", padding: \"20px\" }}>",
            "\t\t<Grid item xs={4} lg={3}>",
            "\t\t</Grid>",
            "\t</Grid>",
            "</ReportFilterBox>"
        ],
        "description": "Report Filter Box"
    },
    "logComData": {
        "prefix": [
            "r-log-com-data",
            "r-log-com-hora"
        ],
        "body": [
            "console.log(`${new Date().toLocaleTimeString()} Beat Enviado com Sucesso`);",
            "console.log(`${new Date().toLocaleDateString()} Beat Enviado com Sucesso`);",
        ],
        "description": "Grid Layout"
    },
    "queryConcat": {
        "prefix": [
            "r-query-concat",
            "r-query-empty-field"
        ],
        "body": [
            "const query = {",
            "\tcreatedAt: {",
            "\t\t\\$gte: new Date(from),",
            "\t\t\\$lte: new Date(to)",
            "\t},",
            "\t...(module && { module: { \\$in: module.split(',').map(item => item.trim()) } }),",
            "\t...(user && { user: { \\$in: user.split(',').map(item => item.trim()) } })",
            "};",
        ],
        "description": "Query Contact"
    },
    "PortalTheme": {
        "prefix": [
            "r-use-theme",
            "r-portal-theme"
        ],
        "body": [
            "// Inicio Portal Theme",
            "// Manipulando o thema de acordo com o selecionado no portal",
            "import { ThemeProvider } from 'omni-layout';",
            "import { useTheme } from \"@mui/material\";",
            "export function PortalThemeProvider({children}) {",
            "\tconst mainTheme = useTheme();",
            "\treturn (",
            "\t\t<ThemeProvider theme={mainTheme}>{children}</ThemeProvider>",
            "\t)",
            "}",
            "// Fim Portal Theme",
            "<PortalThemeProvider>...</PortalThemeProvider>"
        ],
        "description": "Portal Theme"
    },
    "HookTemplate": {
        "prefix": [
            "r-hook-template",
        ],
        "body": [
            "/**",
            " * Use:",
            " * import useCounter from \"./useLog\";",
            " * ...",
            " * const { showLog, showError } = useLog();",
            " */",
            "function useLog() {\n",
            "\tconst showLog = (message) => {",
            "\t\tconsole.log(message);",
            "\t};\n",
            "\tconst showError = (message) => {",
            "\t\tconsole.error(message);",
            "\t}\n",
            "\treturn { showLog, showError };",
            "}\n",
            "export default useLog;\n"
        ],
        "description": "Portal Theme"
    }
    ,
    "ContextTemplate": {
        "prefix": [
            "r-context-provider-template",
        ],
        "body": [
            "/**",
            " * Use:",
            " * ...",
            " * import { useClient } from '../../contexts/ClientContext';",
            " * const { findClient } = useClient();",
            " */",
            "import { createContext, useContext } from 'react';\n",
            "const ClientContext = createContext();\n",
            "export function useClient() {",
            "\treturn useContext(ClientContext);",
            "}\n",
            "export const ClientProvider = ({ children }) => {",
            "\tconst findClient = async (clientId) => {",
            "\t\treturn 'Client';",
            "\t};\n",
            "\treturn (",
            "\t\t<ClientContext.Provider value={{",
            "\t\t\tfindClient",
            "\t\t}}>",
            "\t\t\t{children}",
            "\t\t</ClientContext.Provider>",
            "\t);",
            "}"
        ],
        "description": "Portal Theme"
    }
}
