{
    "bash-template": {
        "prefix": "bash-template",
        "body": [
            "case \\$1 in",
            "\t\"start\")",
            "\t\tdestak \"Command\" \"Description\"",
            "\t\tprint \"\"",
            "\t;;",
            "\t\"build\") ;& \"run\")",
            "\t\tdestak \"Command\" \"Description\"",
            "\t\tprint \"\"",
            "\t;;",
            "\t*)",
            "\t\tdestak \"\\nUsage \" \"command [action] [options] \" usage",
            "\t\tprint \"\\nActions:\\n\"",
            "\t\tdestak \"   action      \" \"Description\"",
            "\t\tprint \"\"",
            "\t;;",
            "esac"
        ],
        "description": "Bash Template"
    },
    "bash-if": {
        "prefix": "bash-if",
        "body": [
            "#--------------- start IF\n",
            "# Verifica se o argumento é nulo",
            "if [ -z \"\\$2\" ]; then",
            "\techo \"O argumento é nulo.\"",
            "\n# contains",
            "elif [[ \"\\$2\" != *\".log\"* ]]; then",
            "\techo \"True\"",
            "\n# é igual ao texto or [ a -eq b]",
            "elif [[ \"\\$2\" == \".txt\" ]]; then",
            "\techo \"False\"",
            "elif [[ \\$station == \"pc\" ]]; then",
            "\techo 'pc'",
            "elif [[ \"\\$station\" == \"note\" ]]; then",
            "\techo 'Notebook'",
            "\n# é igual ao numero",
            "elif [[ \"\\$2\" -eq 0 ]]; then",
            "\techo \"False\"",
            "\n# é maior que o numero or [ a -gt b]",
            "elif [[ \"\\$2\" > 10 ]]; then",
            "\techo \"False\"",
            "\n# é menor que o numero or [ a < b]",
            "elif [[ \"\\$2\" -lt 10 ]]; then",
            "\techo \"False\"",
            "\n# senao",
            "else",
            "\techo \"False\"",
            "fi",
            "\n#--------------- finish IF"
        ],
        "description": "Bash IF"
    },
    "bash-if-simple": {
        "prefix": "bash-if-simple",
        "body": [
            "if [ -z \"\\$2\" ]; then # is null",
            "\techo \"O argumento é nulo.\"",
            "elif [[ \"\\$2\" != *\".log\"* ]]; then # contains",
            "\techo \"True\"",
            "fi"
        ],
        "description": "Bash IF"
    },
    "bash-case": {
        "prefix": "bash-case",
        "body": [
            "case \\$1 in",
            "    '')",
            "        echo '\\empty'",
            "    ;;",
            "    'v1') ;& 'v2'",
            "        echo 'v1-v2'",
            "    ;;",
            "    *)",
            "        echo 'Informe o parametro'",
            "    ;;",
            "esac"
        ],
        "description": "Bash Case"
    },
    "bash-function": {
        "prefix": "bash-function",
        "body": [
            "function print() {",
            "    echo 'message: \\$1'",
            "}",
            "# calling",
            "print 'teste'"
        ],
        "description": "Bash Function"
    },
    "bash-command-n-lines": {
        "prefix": "bash-command-n-lines",
        "body": [
            "node prompt.js service=OMNIDEMO \\",
            "\tuser=dnk \\",
            "\turl=http://localhost:3130/chassi \\",
            "\tmedia=message"
        ],
        "description": "Bash Function"
    },
    "PingMTU": {
        "prefix": "pingmtu",
        "body": [
            "host=\"google.com\"",
            "start_mtu=4000",
            "end_mtu=2000",
            "step=-10",
            "",
            "# realizando a sequencia inversa, contagem regressiva",
            "for mtu in $(seq $start_mtu $step $end_mtu)",
            "do",
            "\techo \"Testing MTU: $mtu\"",
            "\tping -c 4 -D -s $((mtu - 28)) -M do -W 1 -q $host > /dev/null",
            "\tif [ $? -eq 0 ]; then",
            "\t\techo \"MTU $mtu is supported\"",
            "\t\tbreak",
            "\telse",
            "\t\techo \"MTU $mtu is not supported\"",
            "\tfi",
            "done"
        ],
        "description": "Ping MTU sequence"
    },
    "print-array-elements": {
        "prefix": "bash-print-array",
        "body": [
            "meuArray=(5000, 1490, 1480, 1470, 1460, 1450)",
            "",
            "meuArray[0]=5001",
            "",
            "echo \"Primeiro elemento: ${meuArray[0]}\"",
            "echo \"Segundo elemento: ${meuArray[1]}\"",
            "echo \"Terceiro elemento: ${meuArray[2]}\"",
            "",
            "for elemento in \"${meuArray[@]}\"; do",
            "\techo \"Elemento: $elemento\"",
            "done"
        ],
        "description": "Prints the elements of an array"
    },
    "for-loop": {
        "prefix": "bash-for-loop",
        "body": [
            "for ((i=1; i<=1000; i++))",
            "do",
            "\techo $i",
            "done"
        ],
        "description": "Loop from 1 to 1000 and print each number"
    },
    "bash-while-properties": {
        "prefix": "bash-while-properties",
        "body": [
            "repositoriesFile=~/bin/repositories-note.properties",
            "while IFS='=' read -r chave valor",
            "do",
            "\tif [[ $chave =~ ^[^#|^$] ]]; then",
            "\t\texecutePull $chave $valor",
            "\tfi",
            "done < \"$repositoriesFile\""
        ],
        "description": "While in properties file"
    }
}