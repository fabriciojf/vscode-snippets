{
    "redirect": {
        "prefix": "cake-redirect",
        "body": [
            "<?",
            "\\$this->redirect(array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "));"
        ],
        "scope": "php",
        "description": "Cake Redirect"
    },
    "link": {
        "prefix": "cake-link",
        "body": [
            "echo \\$this->Html->link('', array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "));"
        ],
        "description": "Cake Link"
    },
    "linkclass": {
        "prefix": "cake-link-class",
        "body": [
            "echo \\$this->Html->link('', array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "), array(",
            "    'class' => ''",
            "));"
        ],
        "description": "Cake Link"
    },
    "completelink": {
        "prefix": "cake-link-cp",
        "body": [
            "<?php",
            "echo \\$this->Html->link('', array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "));",
            "?>"
        ],
        "description": "Cake Link With php tag"
    },
    "flashok": {
        "prefix": "cake-flash-ok",
        "body": [
            "\\$this->Session->setFlash(__('Settings updated successfully'), 'default', array('class' => 'success'));"
        ],
        "description": "Cake Success Flash"
    },
    "flasherror": {
        "prefix": "cake-flash-error",
        "body": [
            "\\$this->Session->setFlash(__('Error, please try again!'), 'default', array('class' => 'error'));"
        ],
        "description": "Cake Success Flash"
    },
    "ajaxaction": {
        "prefix": "cake-ajaxaction",
        "body": [
            "\\$this->autoRender = false;",
            "if (\\$this->request->is('ajax')) {",
            "\t\\$q = \\$this->request->query;",
            "",
            "\t\\$this->loadModel('Model');",
            "\t\\$this->Model->create();",
            "\t\\$this->request->data['Model']['name'] = \\$q['view_param'];",
            "\t\\$lastid = '';",
            "",
            "\tif (\\$this->Model->save(\\$this->request->data)) {",
            "\t\t\\$lastid = \\$this->Model->id;",
            "\t}",
            "",
            "\treturn json_encode(array(",
            "\t\t'id' => \\$lastid,",
            "\t));",
            "}"
        ],
        "description": "Cake Success Flash"
    },
    "before": {
        "prefix": "cake-before",
        "body": [
            "public function beforeFilter()",
            "{",
            "    parent::beforeFilter();",
            "    \\$this->set('title_for_layout', __(''));",
            "    //\\$this->Auth->allow('action',);",
            "}"
        ],
        "description": "Cake Before Action"
    },
    "require": {
        "prefix": "cake-require",
        "body": [
            "// \\$allSettings = var inside settings.php",
            "require(APP . 'Config' . DS . 'settings.php');",
            "foreach (\\$allSettings as $set) {",
            "    debug(\\$set);",
            "}"
        ],
        "description": "Cake require"
    },
    "components": {
        "prefix": "cake-components",
        "body": [
            "public \\$components = array(",
            "    'Highcharts.Highcharts',",
            ");"
        ],
        "description": "Cake Components"
    },
    "highcharts": {
        "prefix": "cake-highcharts",
        "body": [
            "App::uses('HighchartsAppController', 'Highcharts.Controller');",
            "\\$this->Highcharts = \\$this->Components->load('Highcharts.Highcharts');",
            "\\$this->Highcharts->initialize(\\$this);"
        ],
        "description": "Cake Highcharts"
    },
    "cakethrow": {
        "prefix": "cake-throw",
        "body": [
            "\\$this->Model->id = \\$id;",
            "if (!\\$this->Model->exists()) {",
            "    throw new NotFoundException(sprintf(__('Invalid %s'), __('')));",
            "}"
        ],
        "description": "Cake Throw"
    },
    "modelusetable": {
        "prefix": "cake-model-usetable",
        "body": [
            "public \\$useTable = '';"
        ],
        "description": "Cake Use Table"
    },
    "saveorupdate": {
        "prefix": "cake-save-or-update",
        "body": [
            "if (\\$object != null) {",
            "    \\$this->MODEL->id = \\$object['MODEL']['id'];",
            "    \\$this->MODEL->saveField('created', date('YYYY-mm-dd HH:ii:ss'));",
            "} else {",
            "    \\$this->MODEL->create();",
            "    \\$this->MODEL->save(array(",
            "        'created' => date('YYYY-mm-dd HH:ii:ss'),",
            "    ));",
            "}",
            "",
            "\\$this->MODEL->read(false, \\$this->MODEL->id)"
        ],
        "description": "Cake Save Or Update"
    },
    "modelvalidate": {
        "prefix": "cake-model-validate",
        "body": [
            "\\$this->MODEL->id = \\$id;",
            "if (!\\$this->MODEL->exists()) {",
            "    throw new NotFoundException(sprintf(__('Invalid %s'), __('MODEL')));",
            "}"
        ],
        "description": "Verifica se o objeto existe no banco de dados"
    },
    "layout": {
        "prefix": "cake-layout",
        "body": [
            "// see the folder app/View/Layouts",
            "// admin_generic, admin_generic_light, admin_generic_fluid, admin_generic_no_scroll",
            "\\$this->layout = 'admin_generic';"
        ],
        "description": "Tipos de layouts contendo menus laterais especÃ­ficos"
    },
    "newcontroller": {
        "prefix": "cake-controller",
        "body": [
            "",
            "App::uses('AppController', 'Controller');",
            "class MODELController extends AppController",
            "{",
            "    public function beforeFilter()",
            "    {",
            "       parent::beforeFilter();",
            "    }",
            "",
            "    public function admin_index()",
            "    {",
            "        \\$this->layout = 'admin_add';",
            "        \\$this->MODEL->recursive = 0;",
            "        \\$this->FilterResults->addFilters(array(",
            "                'filter_name' => array(",
            "                    'MODEL.name' => array(",
            "                        'operator' => 'like',",
            "                    )",
            "                ),",
            "            ));",
            "",
            "        \\$conditions = array();",
            "        if (\\$this->FilterResults->getConditions()) {",
            "            \\$conditions = array_merge(\\$this->FilterResults->getConditions(), \\$conditions);",
            "        }",
            "",
            "        \\$this->FilterResults->setPaginate('order', array(",
            "            'MODEL.name' => 'ASC',",
            "        ));",
            "        \\$this->FilterResults->setPaginate('conditions', \\$conditions);",
            "        \\$this->FilterResults->setPaginate('limit', 10);",
            "        \\$this->set('MODEL', \\$this->paginate());",
            "    }",
            "}"
        ],
        "description": "Cake Use Table"
    },
    "filter_list": {
        "prefix": "cake-filter-find",
        "body": [
            "'filter_FIELD' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '=',",
            "        'select' => \\$this->FilterResults->select('',",
            "            \\$this->MODEL->find('list', array(",
            "                'fields' => array(",
            "                    'MODEL.id',",
            "                    'MODEL.name'",
            "                ),",
            "                'group' => 'MODEL.name')))",
            "     )",
            "),"
        ],
        "description": "Filter type Find"
    },
    "filter_select": {
        "prefix": "cake-filter-select",
        "body": [
            "'filter_FIELD' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '=',",
            "        'select' => \\$this->FilterResults->select('FIELD', array(",
            "            0 => 'OP1',",
            "            1 => 'OP2',",
            "            3 => 'OP3',",
            "        ))",
            "    )",
            "),"
        ],
        "description": "Filter type select"
    },
    "filter_array": {
        "prefix": "cake-filter-array",
        "body": [
            "'filter_FIELD' => array(",
            "    'MODEL.FIELD' => array(",
            "        'select' => array(",
            "            '' => 'Qualquer MODEL',",
            "            'op1' => 'Op1',",
            "            'op2' => 'Op2',",
            "            'op3' => 'Op3',",
            "        ),",
            "        'operator' => 'like'",
            "    )",
            "),"
        ],
        "description": "Filter type array"
    },
    "filter_between": {
        "prefix": "cake-filter-between",
        "body": [
            "'filter_from' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '>='",
            "    )",
            "),",
            "'filter_to' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '<='",
            "    )",
            "),"
        ],
        "description": "Filter type array"
    },
    "return_json": {
        "prefix": "cake-json-return",
        "body": [
            "\\$this->autoRender = false;",
            "\\$MODEL = \\$this->MODEL->read(null, \\$id);",
            "return json_encode(\\$MODEL);"
        ],
        "description": "Return Json Page"
    },
    "titleForLayout": {
        "prefix": "cake-title-for-layout",
        "body": [
            "\\$this->set('title_for_layout', __(''));"
        ],
        "description": "Return Title for Layout"
    },
    "saveField": {
        "prefix": "cake-save-field",
        "body": [
            "\\$this->MODEL->id = \\$id;",
            "if (!\\$this->MODEL->exists()) {",
            "    throw new NotFoundException(__('Invalid MODEL'));",
            "}",
            "// OR",
            "\\$this->MODEL->id = \\$id;",
            "\\$this->MODEL->saveField('FIELD', 'VALUE');"
        ],
        "description": "Cake Set, save field"
    },
    "time-component": {
        "prefix": [
            "cake-date-format",
            "cake-datetime-format",
            "cake-time-component",
            "cake-datetim-examples"
        ],
        "body": [
            "<?php",
            "\\$dt = '2025-05-05 11:11:00';",
            "\\$date = date_create(\\$dt);",
            "debug(\\$date->format(\"Y-m-d H:i:s\"));",
            "debug(date_format(\\$date, \"Y/m/d H:i:s\"));",
            "debug(date('Y-m-d H:i:s'));",
            "debug(gmdate('Y-m-d H:i:s')); // UTC"
        ],
        "description": "Perform time-related operations using CakePHP's Time component"
    },
    "cakeJoinFilterResult": {
        "prefix": "cake-join-filter-results",
        "body": [
            "\\$this->FilterResults->setPaginate('joins', array(",
            "    array(",
            "        'alias' => 'ChassiContact',",
            "        'table' => 'chassi_contacts',",
            "        'type' => 'LEFT',",
            "        'conditions' => '\"TabTreeTrack\".\"cid\" = \"ChassiContact\".\"cid\"'",
            "    ),",
            "    array(",
            "        'alias' => 'User',",
            "        'table' => 'users',",
            "        'type' => 'LEFT',",
            "        'conditions' => '\"ChassiContact\".\"user_id\" = \"User\".\"id\"'",
            "    )",
            "));",
            "\\$this->FilterResults->setPaginate('fields', array(",
            "    \"TabTreeTrack.id\",",
            "    \"TabTreeTrack.cid\",",
            "    \"ChassiContact.media\",",
            "    \"ChassiContact.channel\",",
            "    \"User.name\",",
            "    \"User.extension\",",
            "));"
        ],
        "description": "Cake Join Filter Results"
    },
    "cakeConditionOrAnd": {
        "prefix": "cake-condition-or-and",
        "body": [
            "",
            "'conditions' => array(",
            "    'OR' => array(",
            "        array( // or (user_id and user_to_id)",
            "            'Chat.user_id' => $this->Auth->user('id'),",
            "            'Chat.user_to_id' => $userToId,",
            "        ),",
            "        array( // or (user_id and user_to_id)",
            "            'Chat.user_id' => $userToId,",
            "            'Chat.user_to_id' => $this->Auth->user('id'),",
            "        )",
            "    )",
            "),"
        ],
        "description": "Cake condition Or & And in the same query"
    },
    "cakeDelete": {
        "prefix": "cake-delete-field",
        "body": [
            "// delete(integer \\$id = null, boolean \\$cascade = true)",
            "\\$this->Model->delete(\\$model_id);",
            "// deleteAll(mixed \\$conditions, \\$cascade = true, \\$callbacks = false)",
            "\\$this->Model->deleteAll(array(\"Model.id > 0\"), true);"
        ],
        "description": "Cake Delete Template"
    },
    "LayoutConfigurationsImport": {
        "prefix": "cake-layout-configurations-import",
        "body": [
            "// see the folder app/Config/dnk_submenu > attribute highlights",
            "// agent-panel, internal_chat, supervisor-dashboard, agent_dashboard, ",
            "// reports, data-register, queues, settings",
            "\\$this->set('highlight', '');",
            "",
            "// see the folder app/View/Elements/left_menu/",
            "// data_register, empty, history, reports, settings, supervisor_dashboard,",
            "// queues, agent_dashboard",
            "\\$this->set('left_menu', '');",
            "",
            "// see the folder app/View/Layouts",
            "// admin_generic, admin_generic_light, admin_generic_fluid, admin_generic_no_scroll",
            "\\$this->layout = 'admin_generic';"
        ],
        "description": "Cake Update Template"
    },
    "cakeBaseUrl": {
        "prefix": "cake-base-url",
        "body": [
            "Router::url('/', false);",
            "Router::url(array('controller'=>'users','action'=>'index'), false);"
        ],
        "description": "Cake Base Url"
    },
    "cakeFormInputArray": {
        "prefix": "cake-input-array",
        "body": [
            "<?php",
            "    $index = 0;",
            "    foreach ($salmos as $sl) :",
            "?>",
            "    <?= $this->Form->input(\"Music.{$index}.id\"); ?>",
            "    <?= $this->Form->input(\"Music.{$index}.book_music_number\"); ?>",
            "<?php endforeach; ?>"
        ],
        "description": "Cake Form Input Array"
    },
    "cakeWhenToDate": {
        "prefix": [
            "cake-when-to-date",
            "cake-timestamp-convert-utc",
            "cake-utc-convert",
            "cake-timezone-convert"
        ],
        "body": [
            "// Option 1",
            "// 'UTC', 'America/Sao_Paulo', ...",
            "date_default_timezone_set('America/Sao_Paulo');",
            "\\$whenJs = 1678737927980;",
            "\\$whenPhp = 1678737927;",
            "\\$the_date = date('Y-m-d H:i:s', substr(\\$whenJs, 0, 10));",
            "\\$the_date = date('Y-m-d H:i:s', \\$whenPhp);",
            "",
            "// Option 2",
            "\\$value = '2023-04-13T11:52:42.366+0000';",
            "\\$date = new DateTime(\\$value, new DateTimeZone('UTC'));",
            "\\$date->setTimezone(new DateTimeZone('America/Sao_Paulo'));",
            "\\$theDate = date_format(\\$date, 'Y-m-d H:i:s');"
        ],
        "description": "Cake When (int) to Date"
    },
    "cakeImportPhpClass": {
        "prefix": [
            "cake-import-php-class",
            "cake-import-config"
        ],
        "body": [
            "// Processando o objeto",
            "require(APP . 'Config' . DS . 'FILE_NAME.php');",
            "foreach (\\$OBJECT_NAME as \\$item) {",
            "    debug(\\$item['KEY'])",
            "}",
            "",
            "// Enviando o objeto para view",
            "require(APP . 'Config' . DS . 'FILE_NAME.php');",
            "\\$this->set('urls', CLASS_NAME::read('OBJECT_NAME')); // or",
            "\\$this->set('urls', $OBJECT_NAME));"
        ],
        "description": "Cake Import PHP Class"
    },
    "cakeJoinModel": {
        "prefix": "cake-join-model",
        "body": [
            "// Join with string key",
            "public \\$hasOne = array(",
            "    'OtherModel' => array(",
            "        'className' => 'OtherModel',",
            "        'foreignKey' => false,",
            "        'conditions' => array('CurrentModel.cid = OtherModel.cid'),",
            "        'fields' => array(",
            "            'id',",
            "            'otherField',",
            "         )",
            "    )",
            ");",
            "// Custom Join ",
            "public \\$hasAndBelongsToMany = array(",
            "    'OtherModel' => array(",
            "        'className' => 'OtherModel',",
            "        'joinTable' => 'other_table',",
            "        'foreignKey' => 'field_id',",
            "        'associationForeignKey' => 'field_id',",
            "        'unique' => 'keepExisting',",
            "        'fields' => array(",
            "            'id',",
            "            'otherField',",
            "         )",
            "    )",
            ");"
        ],
        "description": "Cake Join Model Example"
    },
    "cakeHttpSocket": {
        "prefix": [
            "cake-http-socket-template"
        ],
        "body": [
            "App::uses('HttpSocket', 'Network/Http');",
            "\\$endpoint = \"{\\$this->emailApiHost}/api/email/message/{\\$emailKey}\";",
            "try {",
            "    \\$http = new HttpSocket();",
            "    \\$request = array(",
            "        'header' => array(",
            "            'Content-Type' => 'application/json',",
            "            //'x-access-token' => \\$login->token,",
            "        ),",
            "    );",
            "    \\$data = $http->get(\\$endpoint, \\$request);",
            "    \\$body = array(",
            "        'body' => \\$data->body,",
            "        'endpoint' => \\$endpoint,",
            "    );",
            "    return \\$body;",
            "} catch (Exception \\$ex) {",
            "    return json_encode(array());",
            "}"
        ],
        "description": "Cake HTTP Socket Template"
    },
    "phpJsonOutput": {
        "prefix": [
            "php-json-output",
            "cake-json-output",
            "html-json-output"
        ],
        "body": [
            "<?php",
            "\\$json = '{",
            "    \"nome\": \"JoÃ£o\",",
            "    \"idade\": 30",
            "}';",
            "header('Content-Type: application/json');",
            "echo \\$json;",
            "exit;",
            "?>"
        ],
        "description": "Cake HTTP Socket Template"
    },
    "crmShowSql": {
        "prefix": [
            "cake-show-sql",
            "cake-dump-sql",
            "cake-sql"
        ],
        "body": [
            "\\$this->showSql('CrmContact');"
        ],
        "description": "Cake Show SQL"
    },
    "sqlQuery": {
        "prefix": [
            "cake-query",
            "cake-query-update",
            "cake-query-param"
        ],
        "body": [
            "\\$this->User->query(",
            "        'select * from model where param like ?',",
            "        array('value%')",
            "    );",
            "\\$this->User->query(",
            "        'select * from model where param1 like :p1 and param2 like :p2',",
            "        array('p1' => 'value1%', 'p2' => 'value2%')",
            "    );"
        ],
        "description": "Cake Query Params"
    },
    "callelement": {
        "prefix": [
            "cake-element"
        ],
        "body": [
            "// Crie a chamada ao elemento na view desejada",
            "\\$this->element('sidemenu_whitelabel', array('highlight' => \\$highlight));",
            "",
            "// Dentro do elemento: portal/app/View/Elements/sidemenu_whitelabel.ctp",
            "// echo $highlight;"
        ],
        "description": "Cake Elements Pattern"
    },
    "cakeElement": {
        "prefix": [
            "cake-bootstrap4-cdn",
            "html-bootstrap4-cdn",
            "bootstrap4-cdn"
        ],
        "body": [
            "<!-- Latest compiled and minified CSS -->",
            "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">",
            "<!-- jQuery library -->",
            "<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.slim.min.js\"></script>",
            "<!-- Popper JS -->",
            "<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>",
            "<!-- Latest compiled JavaScript -->",
            "<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>"
        ],
        "description": "Bootstrap 4 CDN"
    },
    "logs-function": {
        "prefix": [
            "cake-logs-in-file",
            "cake-domni-log"
        ],
        "body": [
            "\\$this->log('$0', 'domni');"
        ],
        "description": "Log messages in a function"
    },
    "cake-my-model-update": {
        "prefix": "cake-update-model",
        "body": [
            "\\$myModelObj = \\$this->MyModel->find('first', array(",
            "\t'conditions' => array(",
            "\t\t'MyModel.field' => 'value',",
            "\t),",
            "\t'order' => 'MyModel.id DESC',",
            "));",
            "",
            "if (\\$myModelObj != null) {",
            "\t\\$this->MyModel->id = \\$myModelObj['MyModel']['id'];",
            "\t\\$this->MyModel->saveField('field', 'value');",
            "}",
            "",
            "\\$myModelFields = array(",
            "\t'field1' => 'value 1',",
            "\t'field2' => 'value 2 ',",
            "\t'field3' => 'value 3'",
            ");",
            "",
            "if (\\$myModelObj != null) {",
            "\t\\$this->MyModel->id = \\$myModelObj['MyModel']['id'];",
            "\t\\$this->MyModel->set(\\$myModelFields);",
            "",
            "\tif (\\$this->MyModel->save()) {",
            "\t\tdebug('Success');",
            "\t} else {",
            "\t\tdebug('Err');",
            "\t}",
            "}"
        ],
        "description": "Perform save operations on MyModel with conditional checks"
    },
    "cake-model-save": {
        "prefix": "cake-save-model",
        "body": [
            "\\$myModelObj = \\$this->MyModel->find('first', array(",
            "\t'conditions' => array(",
            "\t\t'MyModel.field' => 'value',",
            "\t),",
            "\t'order' => 'MyModel.id DESC',",
            "));",
            "",
            "if (\\$myModelObj != null) {",
            "",
            "\t\\$myModelFields = array(",
            "\t\t'field1' => 'value 1',",
            "\t\t'field2' => 'value 2 ',",
            "\t\t'field3' => 'value 3'",
            "\t);",
            "",
            "\t\\$this->MyModel->id = \\$myModelObj['MyModel']['id'];",
            "\t\\$this->MyModel->set(\\$myModelFields);",
            "",
            "\tif (\\$this->MyModel->save()) {",
            "\t\tdebug('Success');",
            "\t} else {",
            "\t\tdebug('Err');",
            "\t}",
            "}"
        ],
        "description": "Perform save operations on MyModel with conditional checks"
    },
    "helper-auth": {
        "prefix": "cake-helper-get-auth-user",
        "body": [
            "$uid = \\$this->Session->read('Auth.User.id');"
        ],
        "description": "Tipos de layouts contendo menus laterais especÃ­ficos"
    },
    "model-inside-model": {
        "prefix": "cake-inserting-model-inside-model",
        "body": [
            "\\$Pausa = ClassRegistry::init('Pausa');",
            "return \\$Pausa->read(false, 1);"
        ],
        "description": "Carregando um model dentro de outro modelno CakePHP"
    },
    "php-switch-statement": {
        "prefix": [
            "cake-switch-case",
            "php-switch-case"
        ],
        "body": [
            "switch (\\$valor) {",
            "\tcase \\$valor1:",
            "\t\t// ",
            "\t\tbreak;",
            "\tdefault:",
            "\t\t// ",
            "\t\tbreak;",
            "}"
        ],
        "description": "Switch statement in PHP"
    },
    "load-model-inside-component": {
        "prefix": "cake-load-model-inside-component",
        "body": [
            "public function loadModel(\\$modelClass)",
            "{",
            "\t\\$this->{\\$modelClass} = ClassRegistry::init(\\$modelClass);",
            "}"
        ],
        "description": "Load a model dynamically in CakePHP"
    },
    "cake-initialize-component": {
        "prefix": [
            "cake-initialize-component",
            "cake-before-filter-inside-component"
        ],
        "body": [
            "// Started with the component",
            "public function initialize(Controller \\$controller)",
            "{",
            "\tparent::initialize(\\$controller);",
            "}"
        ],
        "description": "Initialize a component in CakePHP"
    },
    "updateAll": {
        "prefix": "cake-update-all",
        "body": [
            "<?$0",
            "\\$this->Model->updateAll(",
            "\tarray('field1' => 'value1', 'field2' => 'value2'),",
            "\tarray('conditions' => array())",
            ");"
        ],
        "description": "Update records in CakePHP"
    },
    "saveMany": {
        "prefix": "cake-update-with-save-many",
        "body": [
            "\\$data = array(",
            "\tarray('id' => 1, 'field1' => 'value1'),",
            "\tarray('id' => 2, 'field1' => 'value2'),",
            ");",
            "\\$this->Model->saveMany(\\$data);"
        ],
        "description": "Save multiple records in CakePHP"
    },
    "hasOne": {
        "prefix": [
            "cake-has-one",
            "cake-one-to-one"
        ],
        "body": [
            "public \\$hasOne = array(",
            "\t'ModelName' => array(",
            "\t\t'className' => 'ModelName', // Nome da classe do modelo que estÃ¡ sendo associado",
            "\t\t'foreignKey' => 'foreign_key', // Nome da coluna chave estrangeira na tabela do modelo associado",
            "\t\t'conditions' => array(), // CondiÃ§Ãµes adicionais para a associaÃ§Ã£o",
            "\t\t'fields' => array(), // Campos do modelo associado que serÃ£o retornados na consulta",
            "\t\t'order' => array(), // OrdenaÃ§Ã£o dos resultados",
            "\t\t'dependent' => false // OpÃ§Ã£o de dependÃªncia, define o que acontece com o registro associado quando o registro principal Ã© excluÃ­do",
            "\t),",
            ");"
        ],
        "description": "Defines a hasOne association"
    },
    "hasMany": {
        "prefix": [
            "cake-has-many",
            "cake-one-to-many"
        ],
        "body": [
            "public \\$hasMany = array(",
            "\t'ModelName' => array(",
            "\t\t'className' => 'ModelName', // Nome da classe do modelo que estÃ¡ sendo associado",
            "\t\t'foreignKey' => 'foreign_key', // Nome da coluna chave estrangeira na tabela do modelo associado",
            "\t\t'conditions' => array(), // CondiÃ§Ãµes adicionais para a associaÃ§Ã£o",
            "\t\t'fields' => array(), // Campos do modelo associado que serÃ£o retornados na consulta",
            "\t\t'order' => array(), // OrdenaÃ§Ã£o dos resultados",
            "\t\t'dependent' => false // OpÃ§Ã£o de dependÃªncia, define o que acontece com os dados associados quando o registro principal Ã© excluÃ­do",
            "\t),",
            ");"
        ],
        "description": "Defines hasMany associations"
    },
    "belongsTo": {
        "prefix": [
            "cake-belongs-to"
        ],
        "body": [
            "public \\$belongsTo = array(",
            "\t'ModelName' => array(",
            "\t\t'className' => 'ModelName', // Nome da classe do modelo que estÃ¡ sendo associado",
            "\t\t'foreignKey' => 'foreign_key', // Nome da coluna chave estrangeira na tabela do modelo atual que referencia a chave primÃ¡ria do modelo associado",
            "\t\t'conditions' => array(), // CondiÃ§Ãµes adicionais para a associaÃ§Ã£o",
            "\t\t'fields' => array(), // Campos do modelo associado que serÃ£o retornados na consulta",
            "\t\t'order' => array(), // OrdenaÃ§Ã£o dos resultados",
            "\t),",
            ");"
        ],
        "description": "Defines a belongsTo association"
    },
    "hasAndBelongsToMany": {
        "prefix": [
            "cake-has-and-belongs-to-many",
            "cake-many-to-many"
        ],
        "body": [
            "public \\$hasAndBelongsToMany = array(",
            "\t'ModelName' => array(",
            "\t\t'className' => 'ModelName', // Nome da classe do modelo que estÃ¡ sendo associado",
            "\t\t'joinTable' => 'join_table', // Nome da tabela intermediÃ¡ria que associa os dois modelos",
            "\t\t'foreignKey' => 'foreign_key', // Nome da coluna chave estrangeira na tabela intermediÃ¡ria que referencia a chave primÃ¡ria do modelo atual",
            "\t\t'associationForeignKey' => 'association_foreign_key', // Nome da coluna chave estrangeira na tabela intermediÃ¡ria que referencia a chave primÃ¡ria do modelo associado",
            "\t\t'conditions' => array(), // CondiÃ§Ãµes adicionais para a associaÃ§Ã£o",
            "\t\t'fields' => array(), // Campos do modelo associado que serÃ£o retornados na consulta",
            "\t\t'order' => array(), // OrdenaÃ§Ã£o dos resultados",
            "\t\t'limit' => null, // NÃºmero mÃ¡ximo de resultados retornados",
            "\t\t'offset' => null, // NÃºmero de resultados para pular antes de retornar os resultados",
            "\t), // Fim do array para a associaÃ§Ã£o com ModelName",
            "); // Fim do array \\$hasAndBelongsToMany"
        ],
        "description": "Defines hasAndBelongsToMany associations"
    },
    "validate": {
        "prefix": [
            "cake-validates"
        ],
        "body": [
            "/**",
            " * Validates",
            " */",
            "public \\$validate = array(",
            "\t'username' => array(",
            "\t\t'isUnique' => array(",
            "\t\t\t'rule' => 'isUnique',",
            "\t\t\t'message' => 'The username has already been taken.',",
            "\t\t\t'last' => true,",
            "\t\t),",
            "\t\t'notEmpty' => array(",
            "\t\t\t'rule' => 'notEmpty',",
            "\t\t\t'message' => 'This field cannot be left blank.',",
            "\t\t\t'last' => true,",
            "\t\t),",
            "\t\t'validAlias' => array(",
            "\t\t\t'rule' => 'validAlias',",
            "\t\t\t'message' => 'This field must be alphanumeric',",
            "\t\t\t'last' => true,",
            "\t\t),",
            "\t),",
            ");"
        ],
        "description": "Defines validation rules"
    },
    "filterResultsTemplate": {
        "prefix": [
            "cake-filter-results-template",
            "cake-template-filter-results"
        ],
        "body": [
            "\t\\$this->Pausa->recursive = 0;",
            "\t\\$this->FilterResults->addFilters(",
            "\t\tarray(",
            "\t\t\t'filter_label' => array(",
            "\t\t\t\t'Pausa.label' => array(",
            "\t\t\t\t\t'operator' => 'like',",
            "\t\t\t\t),",
            "\t\t\t),",
            "\t\t);",
            "",
            "\t\\$conditions = array();",
            "\tif (\\$this->FilterResults->getConditions()) {",
            "\t\t\\$conditions = array_merge(\\$this->FilterResults->getConditions(), \\$conditions);",
            "\t}",
            "",
            "\t\\$this->FilterResults->setPaginate('order', 'Pausa.label ASC');",
            "\t\\$this->FilterResults->setPaginate('conditions', \\$conditions);",
            "\t\\$this->FilterResults->setPaginate('limit', 10);",
            "\t\\$this->set('pausas', \\$this->paginate());"
        ],
        "description": "Defines the filter results() function"
    },
    "CakePHPFilterResults": {
        "prefix": [
            "cake-filter-results-jsonb",
            "cake-filter-results-join-jsonb"
        ],
        "body": [
            "// Set paginate fields for FilterResults",
            "\\$this->FilterResults->setPaginate('fields', array(",
            "\t'CoreContact.cid',",
            "\t'\"CoreSegment\".\"data\"->>'start' AS \"CoreSegment__start\"',",
            "));",
            "",
            "// Set paginate joins for FilterResults",
            "\\$this->FilterResults->setPaginate('joins', array(",
            "\tarray(",
            "\t\t'table' => 'core_segments',",
            "\t\t'alias' => 'CoreSegment',",
            "\t\t'type' => 'INNER',",
            "\t\t'conditions' => array(",
            "\t\t\t\"CoreContact.cid = CoreSegment.cid\"",
            "\t\t)",
            "\t)",
            "));",
            "",
            "// Output CoreContact cid",
            "<td><?= h(\\$contact['CoreContact']['cid']); ?></td>",
            "",
            "<td><?= h(\\$contact['CoreSegment']['start']); ?></td>"
        ],
        "description": "CakePHP FilterResults and Output Examples"
    },
    "CoreContactFindAll": {
        "prefix": [
            "cake-find-join-jsonb",
            "cake-find-join-jsonb-field"
        ],
        "body": [
            "\\$this->CoreContact->find('all', array(",
            "\t'recursive' => 0,",
            "\t'fields' => array(",
            "\t\t'CoreContact.cid',",
            "\t\t'\"CoreSegment\".\"data\"->>\\'start\\' AS \"CoreSegment__start\"',",
            "\t),",
            "\t'joins' => array(",
            "\t\tarray(",
            "\t\t\t'table' => 'core_segments',",
            "\t\t\t'alias' => 'CoreSegment',",
            "\t\t\t'type' => 'INNER',",
            "\t\t\t'conditions' => array(",
            "\t\t\t\t\"CoreContact.cid = CoreSegment.cid\"",
            "\t\t\t)",
            "\t\t)",
            "\t)",
            "));"
        ],
        "description": "CoreContact find all with joins and custom fields"
    },
    "cakeJsonbPattern": {
        "prefix": [
            "cake-jsonb-field-pattern"
        ],
        "body": [
            "'fields' => array(",
            "\t'\"CoreSegment\".\"data\"->>\\'start\\' AS \"CoreSegment__start\"',",
            "),",
            "'conditions' => array(",
            "\t'\"CoreIssue\".\"data\"->>\\'expire\\' >= ?' => \\$now->format('Y-m-d H:i:s'),",
            "),"
        ],
        "description": "CoreContact find all with joins and custom fields"
    },
    "filterResultsJsonb": {
        "prefix": "cake-filter-results-jsonb",
        "body": [
            "'filter_status' => array(",
            "\t'\\\"CoreContact\\\".\\\"data\\\"->>\\'endReason\\'' => array(",
            "\t\t'select' => array(",
            "\t\t\t'' => '...',",
            "\t\t\t'abandoned' => 'Abandonado',",
            "\t\t\t'answered' => 'Atendido',",
            "\t\t\t'reject' => 'Rejeitado',",
            "\t\t\t'transferred' => 'Transferido',",
            "\t\t),",
            "\t\t'operator' => 'like'",
            "\t)",
            "),"
        ],
        "description": "Filter results options for jsonb data->>endReason"
    },
    "PaginatorSettings": {
        "prefix": "cake-paginator-settings",
        "body": [
            "\\$this->Paginator->settings = array(",
            "\t'limit' => 10, // NÃºmero de resultados por pÃ¡gina",
            "\t'paramType' => 'querystring', // Define o tipo de parÃ¢metro para as pÃ¡ginas",
            "\t'fields' => array(), // Campos que serÃ£o retornados pela query, se nÃ£o definir, retornarÃ¡ todos",
            "\t'order' => array(), // OrdenaÃ§Ã£o dos resultados, se necessÃ¡rio",
            "\t'joins' => array(), // Joins adicionais, se necessÃ¡rio",
            "\t'conditions' => array(), // CondiÃ§Ãµes adicionais, se necessÃ¡rio",
            "\t'group' => '', // Agrupamento dos resultados, se necessÃ¡rio",
            "\t'limit' => 10, // NÃºmero de resultados por pÃ¡gina",
            "\t'page' => 1, // NÃºmero da pÃ¡gina inicial",
            "\t'recursive' => -1 // Define a recursividade do model, se necessÃ¡rio",
            ");"
        ],
        "description": "Paginator settings for setting up pagination options"
    },
    "GetSetFilterFormData": {
        "prefix": [
            "cake-get-set-filter-form-data"
        ],
        "body": [
            "// Set default Value",
            "\\$this->request->data['filters']['filter_from'] = date('d/m/Y 00:00');",
            "\\$this->request->data['filters']['filter_to'] = date('d/m/Y 23:59');",
            "",
            "// get value",
            "array(",
            "\t'start_time' => \\$this->Dates->ptBRToSql(\\$this->request->data['filters']['filter_from']),",
            "\t'end_time' => \\$this->Dates->ptBRToSql(\\$this->request->data['filters']['filter_to']),",
            ");",
            "",
            "// view",
            "<?= \\$this->Form->create('filters'); ?>",
            "<script type=\"text/javascript\">",
            "    $(function() {",
            "        $(\"#dt_from\").datetimepicker({",
            "            format: 'DD/MM/YYYY HH:mm'",
            "        });",
            "    });",
            "</script>",
            "<div class=\"col-sm-4\">",
            "    <div class=\"form-group row\">",
            "        <label for=\"staticStatus\" class=\"col-sm-4 col-form-label text-right\">Data InÃ­cio *</label>",
            "        <div class=\"col-sm-8\">",
            "            <?= \\$this->Form->input('filter_from', array(",
            "                'id' => 'dt_from',",
            "                'class' => 'form-control form-control-sm',",
            "                'label' => false,",
            "            )); ?>",
            "        </div>",
            "    </div>",
            "</div>"
        ],
        "description": "Get and set filter form data"
    },
    "DatesToSql": {
        "prefix": "cake-dates-tosql",
        "body": [
            "'start_time' => \\$this->Dates->toSql(\\$this->request->data['filters']['filter_from']),",
            "// 'd/m/Y H:i:s' formato vindo da view para ser convertido em 'Y-m-d H:i:s'",
            "'end_time' => \\$this->Dates->toSql(\\$this->request->data['filters']['filter_from'], 'd/m/Y H:i:s'),"
        ],
        "description": "Set 'start_time' with Dates->toSql"
    }
}