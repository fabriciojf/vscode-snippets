{
    "redirect": {
        "prefix": "cake-redirect",
        "body": [
            "\\$this->redirect(array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "));"
        ],
        "description": "Cake Redirect"
    },
    "link": {
        "prefix": "cake-link",
        "body": [
            "echo \\$this->Html->link('', array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "));"
        ],
        "description": "Cake Link"
    },
    "linkclass": {
        "prefix": "cake-link-class",
        "body": [
            "echo \\$this->Html->link('', array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "), array(",
            "    'class' => ''",
            "));"
        ],
        "description": "Cake Link"
    },
    "completelink": {
        "prefix": "cake-link-cp",
        "body": [
            "<?php",
            "echo \\$this->Html->link('', array(",
            "    'plugin' => false,",
            "    'admin' => true,",
            "    'controller' => '',",
            "    'action' => ''",
            "));",
            "?>"
        ],
        "description": "Cake Link With php tag"
    },
    "flashok": {
        "prefix": "cake-flash-ok",
        "body": [
            "\\$this->Session->setFlash(__('Settings updated successfully'), 'default', array('class' => 'success'));"
        ],
        "description": "Cake Success Flash"
    },
    "flasherror": {
        "prefix": "cake-flash-error",
        "body": [
            "\\$this->Session->setFlash(__('Error, please try again!'), 'default', array('class' => 'error'));"
        ],
        "description": "Cake Success Flash"
    },
    "ajaxaction": {
        "prefix": "cake-ajaxaction",
        "body": [
            "public function admin_()",
            "{",
            "    \\$this->autoRender = false;",
            "    if (\\$this->request->is('ajax')) {",
            "",
            "        \\$q = \\$this->request->query;",
            "",
            "        \\$this->loadModel('Model');",
            "        \\$this->Model->create();",
            "        \\$this->request->data['Model']['name'] = \\$q['p_name'];",
            "        \\$lastid = '';",
            "",
            "        if (\\$this->Model->save(\\$this->request->data)) {",
            "            \\$lastid = \\$this->Model->id;",
            "        }",
            "",
            "        return json_encode(array(",
            "            'id' => \\$lastid,",
            "        ));",
            "    }",
            "}"
        ],
        "description": "Cake Success Flash"
    },
    "before": {
        "prefix": "cake-before",
        "body": [
            "public function beforeFilter()",
            "{",
            "    parent::beforeFilter();",
            "    \\$this->set('title_for_layout', __(''));",
            "    //\\$this->Auth->allow('action',);",
            "}"
        ],
        "description": "Cake Before Action"
    },
    "require": {
        "prefix": "cake-require",
        "body": [
            "// \\$allSettings = var inside settings.php",
            "require(APP . 'Config' . DS . 'settings.php');",
            "foreach (\\$allSettings as $set) {",
            "    debug(\\$set);",
            "}"
        ],
        "description": "Cake require"
    },
    "components": {
        "prefix": "cake-components",
        "body": [
            "public \\$components = array(",
            "    'Highcharts.Highcharts',",
            ");"
        ],
        "description": "Cake Components"
    },
    "highcharts": {
        "prefix": "cake-highcharts",
        "body": [
            "App::uses('HighchartsAppController', 'Highcharts.Controller');",
            "\\$this->Highcharts = \\$this->Components->load('Highcharts.Highcharts');",
            "\\$this->Highcharts->initialize(\\$this);"
        ],
        "description": "Cake Highcharts"
    },
    "cakethrow": {
        "prefix": "cake-throw",
        "body": [
            "\\$this->Model->id = \\$id;",
            "if (!\\$this->Model->exists()) {",
            "    throw new NotFoundException(sprintf(__('Invalid %s'), __('')));",
            "}"
        ],
        "description": "Cake Throw"
    },
    "modelusetable": {
        "prefix": "cake-model-usetable",
        "body": [
            "public \\$useTable = '';"
        ],
        "description": "Cake Use Table"
    },
    "saveorupdate": {
        "prefix": "cake-save-or-update",
        "body": [
            "if (\\$object != null) {",
            "    \\$this->MODEL->id = \\$object['MODEL']['id'];",
            "    \\$this->MODEL->saveField('created', date('YYYY-mm-dd HH:ii:ss'));",
            "} else {",
            "    \\$this->MODEL->create();",
            "    \\$this->MODEL->save(array(",
            "        'created' => date('YYYY-mm-dd HH:ii:ss'),",
            "    ));",
            "}",
            "",
            "\\$this->MODEL->read(false, \\$this->MODEL->id)"
        ],
        "description": "Cake Save Or Update"
    },
    "modelvalidate": {
        "prefix": "cake-model-validate",
        "body": [
            "\\$this->MODEL->id = \\$id;",
            "if (!\\$this->MODEL->exists()) {",
            "    throw new NotFoundException(sprintf(__('Invalid %s'), __('MODEL')));",
            "}"
        ],
        "description": "Verifica se o objeto existe no banco de dados"
    },
    "layout": {
        "prefix": "cake-layout",
        "body": [
            "\\$this->layout = 'admin_add';",
            "\\$this->layout = 'admin_agent';",
            "\\$this->layout = 'admin_settings';",
            "\\$this->layout = 'admin_report';"
        ],
        "description": "Tipos de layouts contendo menus laterais especÃ­ficos"
    },
    "newcontroller": {
        "prefix": "cake-controller",
        "body": [
            "",
            "App::uses('AppController', 'Controller');",
            "class MODELController extends AppController",
            "{",
            "    public function beforeFilter()",
            "    {",
            "       parent::beforeFilter();",
            "    }",
            "",
            "    public function admin_index()",
            "    {",
            "        \\$this->layout = 'admin_add';",
            "        \\$this->MODEL->recursive = 0;",
            "        \\$this->FilterResults->addFilters(array(",
            "                'filter_name' => array(",
            "                    'MODEL.name' => array(",
            "                        'operator' => 'like',",
            "                    )",
            "                ),",
            "            ));",
            "",
            "        \\$conditions = array();",
            "        if (\\$this->FilterResults->getConditions()) {",
            "            \\$conditions = array_merge(\\$this->FilterResults->getConditions(), \\$conditions);",
            "        }",
            "",
            "        \\$this->FilterResults->setPaginate('order', array(",
            "            'MODEL.name' => 'ASC',",
            "        ));",
            "        \\$this->FilterResults->setPaginate('conditions', \\$conditions);",
            "        \\$this->FilterResults->setPaginate('limit', 10);",
            "        \\$this->set('MODEL', \\$this->paginate());",
            "    }",
            "}"
        ],
        "description": "Cake Use Table"
    },
    "filter_list": {
        "prefix": "cake-filter-find",
        "body": [
            "'filter_FIELD' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '=',",
            "        'select' => \\$this->FilterResults->select('',",
            "            \\$this->MODEL->find('list', array(",
            "                'fields' => array(",
            "                    'MODEL.id',",
            "                    'MODEL.name'",
            "                ),",
            "                'group' => 'MODEL.name')))",
            "     )",
            "),"
        ],
        "description": "Filter type Find"
    },
    "filter_select": {
        "prefix": "cake-filter-select",
        "body": [
            "'filter_FIELD' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '=',",
            "        'select' => \\$this->FilterResults->select('FIELD', array(",
            "            0 => 'OP1',",
            "            1 => 'OP2',",
            "            3 => 'OP3',",
            "        ))",
            "    )",
            "),"
        ],
        "description": "Filter type select"
    },
    "filter_array": {
        "prefix": "cake-filter-array",
        "body": [
            "'filter_FIELD' => array(",
            "    'MODEL.FIELD' => array(",
            "        'select' => array(",
            "            '' => 'Qualquer MODEL',",
            "            'op1' => 'Op1',",
            "            'op2' => 'Op2',",
            "            'op3' => 'Op3',",
            "        ),",
            "        'operator' => 'like'",
            "    )",
            "),"
        ],
        "description": "Filter type array"
    },
    "filter_between": {
        "prefix": "cake-filter-between",
        "body": [
            "'filter_from' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '>='",
            "    )",
            "),",
            "'filter_to' => array(",
            "    'MODEL.FIELD' => array(",
            "        'operator' => '<='",
            "    )",
            "),"
        ],
        "description": "Filter type array"
    },
    "return_json": {
        "prefix": "cake-json-return",
        "body": [
            "\\$this->autoRender = false;",
            "\\$MODEL = \\$this->MODEL->read(null, \\$id);",
            "return json_encode(\\$MODEL);"
        ],
        "description": "Return Json Page"
    },
    "titleForLayout": {
        "prefix": "cake-title-for-layout",
        "body": [
            "\\$this->set('title_for_layout', __(''));"
        ],
        "description": "Return Title for Layout"
    },
    "saveField": {
        "prefix": "cake-save-field",
        "body": [
            "\\$this->MODEL->id = \\$id;",
            "if (!\\$this->MODEL->exists()) {",
            "    throw new NotFoundException(__('Invalid MODEL'));",
            "}",
            "// OR",
            "\\$this->MODEL->id = \\$id;",
            "\\$this->MODEL->saveField('FIELD', 'VALUE');"
        ],
        "description": "Cake Set, save field"
    },
    "cakeDate": {
        "prefix": "cake-date-format",
        "body": [
            "\\$dt = '2025-05-05 11:11:00';",
            "\\$date = date_create(\\$dt);",
            "debug(date_format(\\$date, \"Y/m/d H:i:s\"));"
        ],
        "description": "Cake date format"
    },
    "cakeJoinFilterResult": {
        "prefix": "cake-join-filter-results",
        "body": [
            "\\$this->FilterResults->setPaginate('joins', array(",
            "    array(",
            "        'alias' => 'ChassiContact',",
            "        'table' => 'chassi_contacts',",
            "        'type' => 'LEFT',",
            "        'conditions' => '\"TabTreeTrack\".\"cid\" = \"ChassiContact\".\"cid\"'",
            "    ),",
            "    array(",
            "        'alias' => 'User',",
            "        'table' => 'users',",
            "        'type' => 'LEFT',",
            "        'conditions' => '\"ChassiContact\".\"user_id\" = \"User\".\"id\"'",
            "    )",
            "));",
            "\\$this->FilterResults->setPaginate('fields', array(",
            "    \"TabTreeTrack.id\",",
            "    \"TabTreeTrack.cid\",",
            "    \"ChassiContact.media\",",
            "    \"ChassiContact.channel\",",
            "    \"User.name\",",
            "    \"User.extension\",",
            "));"
        ],
        "description": "Cake Join Filter Results"
    },
    "cakeConditionOrAnd": {
        "prefix": "cake-condition-or-and",
        "body": [
            "",
            "'conditions' => array(",
            "    'OR' => array(",
            "        array( // or (user_id and user_to_id)",
            "            'Chat.user_id' => $this->Auth->user('id'),",
            "            'Chat.user_to_id' => $userToId,",
            "        ),",
            "        array( // or (user_id and user_to_id)",
            "            'Chat.user_id' => $userToId,",
            "            'Chat.user_to_id' => $this->Auth->user('id'),",
            "        )",
            "    )",
            "),"
        ],
        "description": "Cake condition Or & And in the same query"
    }
}